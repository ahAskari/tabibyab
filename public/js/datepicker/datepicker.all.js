/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/datepicker/datepicker.all.js":
/*!***************************************************!*\
  !*** ./resources/js/datepicker/datepicker.all.js ***!
  \***************************************************/
/***/ (() => {

eval("/**\n * author:丘耀帆\n * github:https://github.com/qiuyaofan\n */\n;\n\n(function ($) {\n  /*==============BEGIN API============*/\n  var defaultOptions = {\n    min: false,\n    max: false,\n    format: 'YYYY-MM-DD HH:mm:ss',\n    isRange: false,\n    hasShortcut: false,\n    shortcutOptions: [],\n    // between:数字：30，string:month/year\n    between: false,\n    language: 'zh-CN',\n    hide: function hide() {},\n    show: function show() {}\n  };\n  var API = {\n    onlytimeReg: function onlytimeReg(format) {\n      return /^HH:mm(:ss)?$/.test(format);\n    },\n    // 获取时分秒格式\n    getFormatTime: function getFormatTime(_this) {\n      return _this.onlyTime ? _this.config.format : _this.config.format.split(' ')[1];\n    },\n    // 时分秒格式正则\n    timeReg: function timeReg(_this) {\n      var format = API.getFormatTime(_this);\n      var regText = format.replace(/HH/, '([0-9]{1,2})').replace(/:/g, '(:?)').replace(/(mm|ss)/g, '([0-9]{1,2})');\n      return new RegExp('^' + regText + '$');\n    },\n    // 日期格式正则\n    dayReg: function dayReg(_this) {\n      var format = _this.config.format.split(' ')[0];\n\n      var splitStrReg = new RegExp(_this.splitStr, 'g');\n      var regText = format.replace(/YYYY/, '([1-9]{1}[0-9]{3})').replace(splitStrReg, '(' + _this.splitStr + '?)').replace(/(MM|DD)/g, '([0-9]{1,2})');\n      return new RegExp('^' + regText + '$');\n    },\n    fixedFill: function fixedFill(dayResult) {\n      // 兼容201808变为2018-00-08的情况\n      if (dayResult[3] == 0) {\n        dayResult[3] = dayResult[5];\n        dayResult[5] = '01';\n      }\n\n      if (dayResult[3].length == 1 && dayResult[5] == 0) {\n        dayResult[3] = dayResult[3] + '0';\n        dayResult[5] = '01';\n      }\n\n      if (dayResult[3].length == 2 && dayResult[5] == 0) {\n        dayResult[5] = '01';\n      }\n\n      return dayResult;\n    },\n    // 日获取月份天数\n    getMonthDay: function getMonthDay(month, year) {\n      var prevMonth = month - 1 < 0 ? 11 : month - 1;\n      return month === 2 && year % 4 === 0 ? '29' : EVERYMONTHHASDAY[prevMonth];\n    },\n    // 匹配是否有相应的时间格式\n    getFormat: function getFormat(format) {\n      var arr = ['YYYY', 'MM', 'DD', 'HH', 'mm', 'ss'];\n      var result = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        result.push(format.indexOf(arr[i]) !== -1);\n      }\n\n      return result;\n    },\n    // 获取原型实例对象\n    getPicker: function getPicker($el, type) {\n      type = type || 'picker';\n      return $el.parents('.c-datepicker-picker').data(type);\n    },\n    // 补0\n    fillTime: function fillTime(val) {\n      return Number(val) < 10 ? '0' + Number(val) : val;\n    },\n    // 修复月份超过最大最小\n    fillMonth: function fillMonth(month, year) {\n      if (month < 1) {\n        month = 12;\n        year = year - 1;\n      } else if (month > 12) {\n        month = 1;\n        year = year + 1;\n      }\n\n      return {\n        month: month,\n        year: year\n      };\n    },\n    // 获取年月日\n    getTimeFormat: function getTimeFormat(_moment) {\n      return {\n        year: _moment.year(),\n        month: _moment.month() + 1,\n        day: _moment.date()\n      };\n    },\n    // 获取时分秒\n    getOnlyTimeFormat: function getOnlyTimeFormat(_moment) {\n      return [_moment.hour(), _moment.minute(), _moment.second()];\n    },\n    getConcatTime: function getConcatTime(hour, minute, second) {\n      return API.fillTime(hour) + ':' + API.fillTime(minute) + ':' + API.fillTime(second);\n    },\n    newDateFixed: function newDateFixed(_this, temp) {\n      var isIE = !!window.ActiveXObject || \"ActiveXObject\" in window;\n      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // Safari 年月模式只能用-,其他Safari、ie用/\n\n      var str = isIE || isSafari && _this.config.format !== 'YYYY-MM' ? '/' : '-';\n      var reg = new RegExp(_this.splitStr, 'g');\n      var result = !temp ? new Date() : _this.splitStr ? new Date(temp.replace(reg, str)) : new Date(temp);\n      return result;\n    },\n    // 范围获取具体年月日\n    getRangeTimeFormat: function getRangeTimeFormat(_this, $input) {\n      var temp;\n      var val = $input.val();\n      temp = val;\n      var result = temp ? moment(API.newDateFixed(_this, temp)) : moment();\n      return API.getTimeFormat(result);\n    },\n    // 判断最大值最小值\n    minMaxFill: function minMaxFill(_this, result, index, type) {\n      // 填充值\n      var val;\n\n      if (type === 'month') {\n        val = result.year + _this.splitStr + API.fillTime(result.month);\n      } else if (type === 'year') {\n        val = result.year + '';\n      } else {\n        val = result.year + _this.splitStr + API.fillTime(result.month) + _this.splitStr + API.fillTime(result.day);\n      }\n\n      if (_this.hasTime) {\n        val += ' ' + _this.$container.find('.c-datePicker__input-time').eq(index).val();\n      }\n\n      if (!_this.config.min && !_this.config.max) {\n        val = val.split(' ')[0];\n        return {\n          val: val,\n          result: result\n        };\n      } // 判断最大值最小值\n\n\n      var nowMoment = moment(API.newDateFixed(_this, val));\n      var minMoment = moment(API.newDateFixed(_this, _this.config.min));\n      var maxMoment = moment(API.newDateFixed(_this, _this.config.max)); // 不在范围内\n\n      var isBefore = nowMoment.isBefore(minMoment);\n      var isAfter = nowMoment.isAfter(maxMoment);\n\n      if (isBefore && _this.config.min) {\n        val = minMoment.format(_this.config.format).split(' ')[0];\n        result = API.getTimeFormat(minMoment);\n      }\n\n      if (isAfter && _this.config.max) {\n        val = maxMoment.format(_this.config.format).split(' ')[0];\n        result = API.getTimeFormat(maxMoment);\n      }\n\n      val = val.split(' ')[0];\n      return {\n        val: val,\n        result: result\n      };\n    },\n    // 时分秒最大值检测\n    timeCheck: function timeCheck(time) {\n      var arr = time.split(':');\n      var checkArr = [23, 59, 59];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (Number(arr[i]) > checkArr[i]) {\n          arr[i] = checkArr[i];\n        }\n      }\n\n      return arr.join(':');\n    },\n    // 超过最大\n    maxMonth: function maxMonth(val) {\n      return val > 12;\n    },\n    // 小于最小\n    minMonth: function minMonth(val) {\n      return val < 1;\n    },\n    // 时分秒范围检测\n    judgeTimeRange: function judgeTimeRange(_this, $day, $time, index) {\n      index = index || 0;\n      var day = $day.val();\n      var time = $time.val();\n\n      if (!day) {\n        return;\n      }\n\n      var val = day + ' ' + time;\n\n      var _moment = moment(API.newDateFixed(_this, val));\n\n      var isBefore = _this.config.min ? _moment.isBefore(API.newDateFixed(_this, _this.config.min)) : false;\n      var isAfter = _this.config.max ? _moment.isAfter(API.newDateFixed(_this, _this.config.max)) : false;\n\n      if (!isBefore && !isAfter) {\n        return;\n      }\n\n      if (isBefore && _this.config.min) {\n        val = _this.config.min;\n        $time.val(val.split(' ')[1]);\n      } else if (isAfter && _this.config.max) {\n        val = _this.config.max;\n        $time.val(val.split(' ')[1]);\n      }\n\n      if (!_this.config.isRange) {\n        _this.$input.eq(index).val(val);\n      }\n    },\n    timeVal: function timeVal(_this, type) {\n      var timeFormat = _this.onlyTime ? _this.config.format : _this.config.format.split(' ')[1];\n      return type === 'min' ? timeFormat.replace(/HH/, '00').replace(/mm/, '00').replace(/ss/, '00') : timeFormat.replace(/HH/, '23').replace(/mm/, '59').replace(/ss/, '59');\n    },\n    getScrollBarWidth: function getScrollBarWidth() {\n      var inner = document.createElement('p');\n      inner.style.width = \"100%\";\n      inner.style.height = \"200px\";\n      var outer = document.createElement('div');\n      outer.style.position = \"absolute\";\n      outer.style.top = \"0px\";\n      outer.style.left = \"0px\";\n      outer.style.visibility = \"hidden\";\n      outer.style.width = \"200px\";\n      outer.style.height = \"150px\";\n      outer.style.overflow = \"hidden\";\n      outer.appendChild(inner);\n      document.body.appendChild(outer);\n      var w1 = inner.offsetWidth;\n      outer.style.overflow = 'scroll';\n      var w2 = inner.offsetWidth;\n      if (w1 == w2) w2 = outer.clientWidth;\n      document.body.removeChild(outer);\n      var barWidth = w1 - w2;\n\n      if (barWidth === 0) {\n        barWidth = 15;\n      }\n\n      return barWidth;\n    },\n    getOnlyTimeMinMax: function getOnlyTimeMinMax(_this) {\n      var min = _this.config.min;\n      var max = _this.config.max;\n      var emptyVal = void 0;\n      var minJson = {\n        hour: emptyVal,\n        minute: emptyVal,\n        second: emptyVal\n      };\n      var maxJson = {\n        hour: emptyVal,\n        minute: emptyVal,\n        second: emptyVal\n      };\n      var hasMin = min && min.match(API.timeReg(_this));\n      var hasMax = max && max.match(API.timeReg(_this));\n      var hasMinMax = hasMax && hasMin ? true : hasMax ? 'max' : hasMin ? 'min' : false;\n\n      if (hasMin) {\n        var _min = min.split(':');\n\n        minJson.hour = Number(_min[0]);\n        minJson.minute = Number(_min[1]);\n        minJson.second = Number(_min[2]);\n      }\n\n      if (hasMax) {\n        var _max = max.split(':');\n\n        maxJson.hour = Number(_max[0]);\n        maxJson.minute = Number(_max[1]);\n        maxJson.second = Number(_max[2]);\n      }\n\n      var minSecond = hasMin ? API.countSecond(min.split(':')) : void 0;\n      var maxSecond = hasMax ? API.countSecond(max.split(':')) : void 0;\n      return {\n        min: minJson,\n        max: maxJson,\n        hasMin: hasMin,\n        hasMax: hasMax,\n        hasMinMax: hasMinMax,\n        minSecond: minSecond,\n        maxSecond: maxSecond,\n        minVal: min,\n        maxVal: max\n      };\n    },\n    countSecond: function countSecond(result) {\n      return result.length === 2 ? result = Number(result[0]) * 60 + Number(result[1]) : result.length === 3 ? result = Number(result[0]) * 3600 + Number(result[1]) * 60 + Number(result[2]) : false;\n    }\n  };\n  var JQTABLESCROLLWIDTH = API.getScrollBarWidth();\n  var RENDERAPI = {\n    tableTpl: function tableTpl(className, content) {\n      var html = '<table class=\"' + className + '\" style=\"\">' + '<tbody>' + content + '</tbody>' + '</table>';\n      return html;\n    },\n    tdTpl: function tdTpl(today, value) {\n      var html = '<td class=\"' + today + '\">' + '<div>' + '<a class=\"cell\">' + value + '</a>' + '</div>' + '</td>';\n      return html;\n    },\n    dayHeader: function dayHeader(nameOptions) {\n      var days = nameOptions.days;\n      var thHtml = '';\n\n      for (var i = 0, len = days.length; i < len; i++) {\n        thHtml += '<th>' + days[i] + '</th>';\n      }\n\n      var html = '<tr>' + thHtml + '</tr>';\n      return html;\n    },\n    timeLiTpl: function timeLiTpl(className, time) {\n      var html = '<li class=\"c-datepicker-time-spinner__item ' + className + '\">' + time + '</li>';\n      return html;\n    },\n    timeTpl: function timeTpl(className, li) {\n      var html = '<div class=\"c-datepicker-time-spinner__wrapper c-datepicker-scrollbar\">' + '<div class=\"c-datepicker-scrollbar__wrap ' + className + '\" style=\"max-height: inherit; margin-bottom: -' + JQTABLESCROLLWIDTH + 'px; margin-right: -' + JQTABLESCROLLWIDTH + 'px;\">' + '<ul class=\"c-datepicker-scrollbar__view c-datepicker-time-spinner__list\">' + li + '</ul>' + '</div>' + '</div>';\n      return html;\n    },\n    timeMainTpl: function timeMainTpl(nameOptions, time) {\n      var html = '<div class=\"c-datepicker-time-panel c-datepicker-popper\" style=\"\">' + '<div class=\"c-datepicker-time-panel__content has-seconds\">' + '<div class=\"c-datepicker-time-spinner has-seconds\">' + time + '</div>' + '</div>' + '<div class=\"c-datepicker-time-panel__footer\">' + '<button type=\"button\" class=\"c-datepicker-time-panel__btn min\">' + nameOptions.zero + '</button>' + '<button type=\"button\" class=\"c-datepicker-time-panel__btn max\">23:59</button>' + '<button type=\"button\" class=\"c-datepicker-time-panel__btn cancel\">' + nameOptions.cancel + '</button>' + '<button type=\"button\" class=\"c-datepicker-time-panel__btn confirm\">' + nameOptions.confirm + '</button>' + '</div>' + '</div>';\n      return html;\n    },\n    sideBarButton: function sideBarButton(day, time, name) {\n      var html = '<button type=\"button\" class=\"c-datepicker-picker__shortcut\" data-value=\"' + day + '\" data-time=\"' + time + '\">' + name + '</button>';\n      return html;\n    },\n    sideBarTpl: function sideBarTpl(button) {\n      var html = '<div class=\"c-datepicker-picker__sidebar\">' + button + '</div>';\n      return html;\n    },\n    pickerFooterTpl: function pickerFooterTpl(nameOptions, className, text) {\n      var clearHtml = '';\n\n      if (className === 'c-datepicker-picker__btn-now') {\n        clearHtml = '<button type=\"button\" class=\"c-datepicker-button c-datepicker-picker__link-btn c-datepicker-button--text c-datepicker-button--mini c-datepicker-picker__btn-clear\">' + '<span>' + nameOptions.clear + '</span>' + '</button>';\n      }\n\n      var html = '<div class=\"c-datepicker-picker__footer\" style=\"\">' + clearHtml + '<button type=\"button\" class=\"c-datepicker-button c-datepicker-picker__link-btn c-datepicker-button--text c-datepicker-button--mini ' + className + '\">' + '<span>' + text + '</span>' + '</button>' + '<button type=\"button\" class=\"c-datepicker-button c-datepicker-picker__link-btn confirm c-datepicker-button--default c-datepicker-button--mini is-plain\">' + '<span>' + nameOptions.confirm + '</span>' + '</button>' + '</div>';\n      return html;\n    },\n    pickerArrowTpl: function pickerArrowTpl() {\n      return '<div x-arrow=\"\" class=\"popper__arrow\" style=\"left: 35px;\"></div>';\n    },\n    pickerHeaderTpl: function pickerHeaderTpl(nameOptions, className, prev, next, year, month) {\n      var html = '<div class=\"' + className + '__header\">' + prev + '<span role=\"button\" class=\"' + className + '__header-label ' + className + '__header-year\"><span>' + year + '</span> ' + nameOptions.headerYearLink + '</span>' + '<span role=\"button\" class=\"' + className + '__header-label ' + className + '__header-month\"><span>' + month + '</span> ' + nameOptions.units[1] + '</span>' + next + '</div>';\n      return html;\n    },\n    pickerHeaderPrevTpl: function pickerHeaderPrevTpl(nameOptions, className) {\n      var html = '<i class=\"kxiconfont icon-first c-datepicker-picker__icon-btn ' + className + '__prev-btn year\" aria-label=\"' + nameOptions.prevYear + '\"></i>' + '<i class=\"kxiconfont icon-left c-datepicker-picker__icon-btn ' + className + '__prev-btn month\" aria-label=\"' + nameOptions.nextMonth + '\"></i>';\n      return html;\n    },\n    pickerHeaderNextTpl: function pickerHeaderNextTpl(nameOptions, className) {\n      var html = '<i class=\"kxiconfont icon-right c-datepicker-picker__icon-btn ' + className + '__next-btn month\" aria-label=\"' + nameOptions.nextMonth + '\"></i>' + '<i class=\"kxiconfont icon-last c-datepicker-picker__icon-btn ' + className + '__next-btn year\" aria-label=\"' + nameOptions.nextYear + '\"></i>';\n      return html;\n    },\n    pickerHeaderNextSingleTpl: function pickerHeaderNextSingleTpl(nameOptions, className) {\n      var html = '<i class=\"kxiconfont icon-last c-datepicker-picker__icon-btn ' + className + '__next-btn year\" aria-label=\"' + nameOptions.nextYear + '\"></i>' + '<i class=\"kxiconfont icon-right c-datepicker-picker__icon-btn ' + className + '__next-btn month\" aria-label=\"' + nameOptions.nextMonth + '\"></i>';\n      return html;\n    },\n    pickerTimeHeaderTpl: function pickerTimeHeaderTpl(nameOptions, className) {\n      var html = '<span class=\"' + className + '__editor-wrap\">' + '<div class=\"c-datepicker-input c-datepicker-input--small\">' + '<input type=\"text\" autocomplete=\"off\" placeholder=\"' + nameOptions.chooseDay + '\" class=\"c-datepicker-input__inner c-datePicker__input-day\">' + '</div>' + '</span>' + '<span class=\"' + className + '__editor-wrap\">' + '<div class=\"c-datepicker-input c-datepicker-input--small\">' + '<input type=\"text\" autocomplete=\"off\" placeholder=\"' + nameOptions.chooseTime + '\" class=\"c-datepicker-input__inner c-datePicker__input-time\">' + '</div>' + '</span>';\n      return html;\n    },\n    pickerOnlyTimeHeaderTpl: function pickerOnlyTimeHeaderTpl(className, name) {\n      var html = '<span class=\"' + className + '__editor-wrap\">' + '<div class=\"c-datepicker-only-time-title\">' + name + '</div>' + '</span>';\n      return html;\n    },\n    rangePickerMainTpl: function rangePickerMainTpl(nameOptions, hasTime, hasSidebar, yearEnd, monthEnd, sidebar, table) {\n      var className = 'c-datepicker-date-range-picker';\n      var timeHeader = RENDERAPI.pickerTimeHeaderTpl(nameOptions, className);\n      var prev = RENDERAPI.pickerHeaderPrevTpl(nameOptions, className);\n      var next = RENDERAPI.pickerHeaderNextTpl(nameOptions, className);\n      var pickerHeader = RENDERAPI.pickerHeaderTpl(nameOptions, className, prev, '', '{{year}}', '{{month}}');\n      var pickerHeader2 = RENDERAPI.pickerHeaderTpl(nameOptions, className, '', next, yearEnd, monthEnd);\n      var footer = RENDERAPI.pickerFooterTpl(nameOptions, 'c-datepicker-picker__btn-clear', nameOptions.clear);\n      var arrow = RENDERAPI.pickerArrowTpl();\n      var html = '<div class=\"c-datepicker-picker c-datepicker-date-range-picker c-datepicker-popper ' + hasTime + ' ' + hasSidebar + '\" x-placement=\"top-start\">' + '<div class=\"c-datepicker-picker__body-wrapper\">' + sidebar + '<div class=\"c-datepicker-picker__body\">' + '<div class=\"c-datepicker-date-range-picker__time-header\">' + '<div class=\"c-datepicker-date-range-picker__time-content\">' + timeHeader + '</div>' + '<span class=\"kxiconfont icon-right\"></span>' + '<div class=\"c-datepicker-date-range-picker__time-content\">' + timeHeader + '</div>' + '</div>' + '<div class=\"c-datepicker-picker__body-content\">' + '<div class=\"c-datepicker-date-range-picker-panel__wrap is-left\">' + pickerHeader + '<div class=\"c-datepicker-picker__content\">' + table + '</div>' + '</div>' + '<div class=\"c-datepicker-date-range-picker-panel__wrap is-right\">' + pickerHeader2 + '<div class=\"c-datepicker-picker__content\">' + table + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + footer + arrow + '</div>';\n      return html;\n    },\n    pickerFooterOnlyTimeTpl: function pickerFooterOnlyTimeTpl(nameOptions) {\n      //  范围-只有时分秒\n      var html = '<div class=\"c-datepicker-picker__footer\" style=\"\">' + '<button type=\"button\" class=\"c-datepicker-button c-datepicker-picker__link-btn c-datepicker-button--text c-datepicker-button--mini  c-datepicker-picker__btn-clear\">' + '<span>' + nameOptions.clear + '</span>' + '</button>' + '<button type=\"button\" class=\"c-datepicker-button c-datepicker-picker__link-btn c-datepicker-button--text c-datepicker-button--mini  c-datepicker-picker__btn-cancel\">' + '<span>' + nameOptions.cancel + '</span>' + '</button>' + '<button type=\"button\" class=\"c-datepicker-button c-datepicker-picker__link-btn confirm c-datepicker-button--default c-datepicker-button--mini is-plain\">' + '<span>' + nameOptions.confirm + '</span>' + '</button>' + '</div>';\n      return html;\n    },\n    rangePickerMainOnlyTimeTpl: function rangePickerMainOnlyTimeTpl(nameOptions, hasTime) {\n      var className = 'c-datepicker-date-range-picker';\n      var headerBegin = RENDERAPI.pickerOnlyTimeHeaderTpl(className, nameOptions.begin);\n      var headerEnd = RENDERAPI.pickerOnlyTimeHeaderTpl(className, nameOptions.end);\n      var footer = RENDERAPI.pickerFooterOnlyTimeTpl(nameOptions);\n      var arrow = RENDERAPI.pickerArrowTpl();\n      var html = '<div class=\"c-datepicker-picker c-datepicker-date-range-picker c-datepicker-popper ' + hasTime + '\" x-placement=\"top-start\">' + '<div class=\"c-datepicker-picker__body-wrapper\">' + '<div class=\"c-datepicker-picker__body\">' + '<div class=\"c-datepicker-date-range-picker__time-header\">' + '<div class=\"c-datepicker-date-range-picker__time-content c-datepicker-date-picker__onlyTime-content\">' + headerBegin + '</div>' + '<div class=\"c-datepicker-date-range-picker__time-content c-datepicker-date-picker__onlyTime-content\">' + headerEnd + '</div>' + '</div>' + '</div>' + '</div>' + footer + arrow + '</div>';\n      return html;\n    },\n    pickerFooterNowButton: function pickerFooterNowButton(nameOptions) {\n      var html = RENDERAPI.pickerFooterTpl(nameOptions, 'c-datepicker-picker__btn-now', nameOptions.now);\n      return html;\n    },\n    pickerFooterClearButton: function pickerFooterClearButton(nameOptions) {\n      var html = RENDERAPI.pickerFooterTpl(nameOptions, 'c-datepicker-picker__btn-clear', nameOptions.clear);\n      return html;\n    },\n    datePickerMainTpl: function datePickerMainTpl(nameOptions) {\n      var className = 'c-datepicker-date-picker';\n      var timeHeader = RENDERAPI.pickerTimeHeaderTpl(nameOptions, className);\n      var prev = RENDERAPI.pickerHeaderPrevTpl(nameOptions, className);\n      var next = RENDERAPI.pickerHeaderNextSingleTpl(nameOptions, className);\n      var pickerHeader = RENDERAPI.pickerHeaderTpl(nameOptions, className, prev, next, '{{year}}', '{{month}}');\n      var arrow = RENDERAPI.pickerArrowTpl(); // 单个\n\n      var html = '<div class=\"c-datepicker-picker c-datepicker-date-picker c-datepicker-popper {{hasTime}} {{hasSidebar}}\" x-placement=\"top-start\">' + '<div class=\"c-datepicker-picker__body-wrapper\">' + '{{sidebar}}' + '<div class=\"c-datepicker-picker__body\">' + '<div class=\"c-datepicker-date-picker__time-header\">' + timeHeader + '</div>' + pickerHeader + ' <div class=\"c-datepicker-picker__content\">' + '{{table}}' + '</div>' + '</div>' + '</div>' + '{{footerButton}}' + arrow + '</div>';\n      return html;\n    },\n    datePickerMainOnlyTimeTpl: function datePickerMainOnlyTimeTpl(hasTime) {\n      var header = RENDERAPI.pickerOnlyTimeHeaderTpl('c-datepicker-date-picker', '');\n      var arrow = RENDERAPI.pickerArrowTpl(); // 单个-只有时分秒\n\n      var html = '<div class=\"c-datepicker-picker c-datepicker-date-picker c-datepicker-popper ' + hasTime + '\" x-placement=\"top-start\">' + '<div class=\"c-datepicker-picker__body-wrapper\">' + '<div class=\"c-datepicker-picker__body\">' + '<div class=\"c-datepicker-date-picker__time-header c-datepicker-date-picker__onlyTime-content\">' + header + '</div>' + '</div>' + '</div>' + arrow + '</div>';\n      return html;\n    },\n    monthWords: function monthWords(nameOptions) {\n      return nameOptions.months;\n    }\n  };\n  var EVERYMONTHHASDAY = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  /*==============END API============*/\n\n  /*===============BEGIN 发布订阅==================*/\n  // 全局组件：pub/sub\n\n  var o = $({});\n\n  $.sub = function () {\n    o.on.apply(o, arguments);\n  };\n\n  $.unsub = function () {\n    o.off.apply(o, arguments);\n  };\n\n  $.pub = function () {\n    o.trigger.apply(o, arguments);\n  };\n  /*===============END 发布订阅==================*/\n\n  /*==============BEGIN YEAR============*/\n  // .c-datepicker-picker__content\n\n\n  function Year(picker) {\n    this.picker = picker;\n    this.init();\n  }\n\n  $.extend(Year.prototype, {\n    init: function init() {},\n    event: function event() {\n      // 点击选择年\n      if (!this.picker.config.isRange) {\n        this.picker.$container.on('click', '.c-datepicker-year-table td.available', function () {\n          if ($(this).hasClass('disabled')) {\n            return;\n          }\n\n          var _this = API.getPicker($(this), 'year');\n\n          var activeNum = $(this).text();\n\n          _this.picker.$container.find('.c-datepicker-date-picker__header-year span').text(activeNum); // 年类型，无月、日期\n\n\n          if (_this.picker.params.isYear) {\n            _this.picker.$input.val(activeNum);\n\n            _this.picker.$container.find('.c-datepicker-year-table td.current').removeClass('current');\n\n            $(this).addClass('current');\n\n            _this.picker.datePickerObject.hide('choose');\n          } else {\n            _this.picker.monthObject.render();\n\n            _this.hide();\n          }\n        });\n      }\n    },\n    show: function show() {\n      this.picker.$container.find('.c-datepicker-date-table,.c-datepicker-month-table,.c-datepicker-date-picker__header-month').hide();\n      this.picker.$container.find('.c-datepicker-year-table').show();\n    },\n    hide: function hide() {\n      this.picker.$container.find('.c-datepicker-year-table').hide();\n      this.picker.$container.find('.c-datepicker-date-picker__prev-btn.year,.c-datepicker-date-picker__next-btn.year').removeClass('is-year');\n    },\n    render: function render(year) {\n      var html = this.renderHtml(year);\n      var $year = this.picker.$container.find('.c-datepicker-year-table');\n\n      if (!$year.length) {\n        this.picker.$container.find('.c-datepicker-picker__content').append(html);\n        this.picker.$container.data('year', this);\n        this.show();\n        this.event();\n      } else {\n        $year.replaceWith(html);\n        this.show();\n      }\n\n      this.picker.$container.find('.c-datepicker-date-picker__prev-btn.month,.c-datepicker-date-picker__next-btn.month').hide();\n      this.picker.$container.find('.c-datepicker-date-picker__prev-btn.year,.c-datepicker-date-picker__next-btn.year').addClass('is-year');\n    },\n    renderHtml: function renderHtml(year) {\n      year = year || moment().year();\n      var min = Number(parseInt(year / 10) + '0'); // var max = min+9;\n\n      var temp = '';\n      var html = '';\n      var val = this.picker.$input.val();\n      var activeYear = val ? API.getTimeFormat(moment(API.newDateFixed(this.picker, val))).year : false;\n      var nameOptions = $.fn.datePicker.dates[this.picker.language];\n      this.picker.$container.find('.c-datepicker-date-picker__header-year span').text(min + nameOptions.headerYearLink + '-' + (min + 9));\n\n      for (var index = 0; index < 10; index++) {\n        var _val = min + index;\n\n        var className = _val == activeYear ? 'current available' : 'available';\n\n        if (_val < this.picker.minJson.year || _val > this.picker.maxJson.year) {\n          className += ' disabled';\n        }\n\n        temp += RENDERAPI.tdTpl(className, _val);\n\n        if ((index + 1) % 4 === 0) {\n          html += '<tr>' + temp + '</tr>';\n          temp = '';\n        }\n      }\n\n      if (temp) {\n        html += '<tr>' + temp + '</tr>';\n      }\n\n      html = RENDERAPI.tableTpl('c-datepicker-year-table', html);\n      return html;\n    }\n  });\n  /*==============END YEAR============*/\n\n  /*==============BEGIN MONTH============*/\n  // 月\n\n  function Month(picker) {\n    this.picker = picker;\n    this.init();\n  }\n\n  $.extend(Month.prototype, {\n    init: function init() {},\n    event: function event() {\n      if (!this.picker.config.isRange) {\n        // 点击选择月份\n        this.picker.$container.on('click', '.c-datepicker-month-table td.available', function () {\n          if ($(this).hasClass('disabled')) {\n            return;\n          }\n\n          var _this = API.getPicker($(this), 'month');\n\n          var year = _this.picker.$container.find('.c-datepicker-date-picker__header-year span').text();\n\n          var month = _this.picker.$container.find('.c-datepicker-month-table td').index($(this)) + 1;\n\n          _this.picker.$container.find('.c-datepicker-date-picker__header-month span').text(month); // 是选择月，无日期\n\n\n          if (_this.picker.params.isMonth) {\n            var val = year + _this.picker.splitStr + API.fillTime(month);\n\n            _this.picker.$input.val(val);\n\n            _this.picker.$container.find('.c-datepicker-month-table td.current').removeClass('current');\n\n            $(this).addClass('current');\n\n            _this.picker.datePickerObject.hide('choose');\n          } else {\n            _this.picker.dayObject.renderSingle(year, month, false, true);\n\n            _this.hide();\n          }\n        });\n      }\n    },\n    show: function show() {\n      this.picker.$container.find('.c-datepicker-month-table').show();\n      this.picker.$container.find('.c-datepicker-date-table,.c-datepicker-year-table').hide();\n    },\n    hide: function hide() {\n      this.picker.$container.find('.c-datepicker-date-picker__prev-btn.month,.c-datepicker-date-picker__next-btn.month').show();\n      this.picker.$container.find('.c-datepicker-date-picker__header-month').show();\n      this.picker.$container.find('.c-datepicker-month-table').hide();\n      this.picker.$container.find('.c-datepicker-date-picker__prev-btn.year,.c-datepicker-date-picker__next-btn.year').removeClass('is-month');\n    },\n    render: function render() {\n      var html = this.renderHtml();\n      var $month = this.picker.$container.find('.c-datepicker-month-table');\n\n      if (!$month.length) {\n        this.picker.$container.find('.c-datepicker-picker__content').append(html);\n        this.picker.$container.data('month', this);\n        this.show();\n        this.event();\n      } else {\n        $month.replaceWith(html);\n        this.show();\n      }\n\n      this.picker.$container.find('.c-datepicker-date-picker__prev-btn.year,.c-datepicker-date-picker__next-btn.year').addClass('is-month');\n    },\n    renderHtml: function renderHtml() {\n      // month = month || moment().month() + 1;\n      var min = 1;\n      var temp = '';\n      var html = '';\n      var nowYear = this.picker.$container.find('.c-datepicker-date-picker__header-year span').text();\n      var minYear = this.picker.minJson.year;\n      var maxYear = this.picker.maxJson.year;\n      var disabledName = '';\n      var isSame = false; // 不在范围内\n\n      if (nowYear < minYear || nowYear > maxYear) {\n        disabledName = ' disabled';\n      } else if (nowYear == minYear || nowYear == maxYear) {\n        isSame = true;\n        var minMonth, maxMonth;\n\n        if (maxYear == minYear) {\n          minMonth = this.picker.minJson.month;\n          maxMonth = this.picker.maxJson.month;\n        } else if (nowYear == minYear) {\n          minMonth = this.picker.minJson.month;\n          maxMonth = 13;\n        } else if (nowYear == maxYear) {\n          minMonth = 0;\n          maxMonth = this.picker.maxJson.month;\n        }\n      }\n\n      var val = this.picker.$input.val();\n      var formatResult = API.getTimeFormat(moment(API.newDateFixed(this.picker, val)));\n      var activeMonth = val && formatResult.year == nowYear ? formatResult.month : false;\n      var nameOptions = $.fn.datePicker.dates[this.picker.language];\n      var words = RENDERAPI.monthWords(nameOptions);\n\n      for (var index = 0; index < 12; index++) {\n        var _val = min + index; // var className = 'available';\n\n\n        var className = _val === activeMonth ? 'current available' : 'available';\n        className += disabledName;\n\n        if (isSame && (_val < minMonth || _val > maxMonth)) {\n          className += ' disabled';\n        }\n\n        temp += RENDERAPI.tdTpl(className, words[index]);\n\n        if ((index + 1) % 4 === 0) {\n          html += '<tr>' + temp + '</tr>';\n          temp = '';\n        }\n      }\n\n      html = RENDERAPI.tableTpl('c-datepicker-month-table', html);\n      return html;\n    }\n  });\n  /*==============END MONTH============*/\n\n  /*==============BEGIN DAY============*/\n  // 日期\n\n  function Day(picker) {\n    this.picker = picker;\n    this.init();\n  }\n\n  $.extend(Day.prototype, {\n    init: function init() {\n      this.current = 0;\n    },\n    eventSingle: function eventSingle() {\n      // 点击选择日期\n      this.picker.$container.on('click', '.c-datepicker-date-table td.available', function (event) {\n        event.stopPropagation();\n        var $this = $(this);\n\n        var _this = API.getPicker($this, 'day');\n\n        if ($this.hasClass('disabled')) {\n          return;\n        }\n\n        if (_this.picker.isBlur) {\n          var $wrap = $this.parents('.c-datepicker-picker__content');\n          var index = $wrap.find('.c-datepicker-date-table td').index($this);\n          $.sub('datapickerClick', function (e) {\n            $this = $wrap.find('.c-datepicker-date-table td').eq(index);\n            clickDate(_this, $this);\n            $.unsub('datapickerClick');\n          });\n          $.pub('datapickerRenderPicker');\n        } else {\n          clickDate(_this, $this);\n        }\n      });\n\n      function clickDate(_this, $target) {\n        var activeNum = $target.text();\n\n        _this.picker.$container.find('.c-datepicker-date-table td.current').removeClass('current');\n\n        $target.addClass('current');\n\n        var val = _this.picker.$container.find('.c-datePicker__input-day').val();\n\n        if (!val) {\n          var time = moment().format(_this.picker.config.format).split(' ')[1];\n\n          _this.picker.$container.find('.c-datePicker__input-time').val(time);\n\n          setValue.call(_this, activeNum, moment(), moment());\n        } else {\n          var inputVal = _this.picker.$input.val();\n\n          setValue.call(_this, activeNum, moment(API.newDateFixed(_this.picker, val)), moment(API.newDateFixed(_this.picker, inputVal)));\n        }\n\n        if (!_this.picker.hasTime) {\n          _this.picker.datePickerObject.hide('choose');\n        } else {\n          API.judgeTimeRange(_this.picker, _this.picker.$container.find('.c-datePicker__input-day'), _this.picker.$container.find('.c-datePicker__input-time'));\n        }\n      } // 设置选中值\n\n\n      function setValue(activeNum, input, inputDay) {\n        var year = this.picker.$container.find('.c-datepicker-date-picker__header-year span').text();\n        var month = this.picker.$container.find('.c-datepicker-date-picker__header-month span').text() - 1; // picker里的日期input\n\n        val = input.set({\n          'year': year,\n          'month': month,\n          'date': activeNum\n        }).format(this.picker.config.format.split(' ')[0]);\n        this.picker.$container.find('.c-datePicker__input-day').val(val); // 整个表单input update\n\n        var inputVal = inputDay.set({\n          'year': year,\n          'month': month,\n          'date': activeNum\n        }).format(this.picker.config.format);\n        this.picker.$input.val(inputVal);\n      }\n    },\n    eventRange: function eventRange() {\n      // 点击选择日期\n      this.picker.$container.on('click', '.c-datepicker-date-table td.available', function (event) {\n        event.stopPropagation();\n        var $this = $(this);\n\n        if ($this.hasClass('disabled')) {\n          return;\n        }\n\n        var _this = API.getPicker($this, 'day');\n\n        if (_this.picker.isBlur) {\n          var $wrap = $this.parents('.c-datepicker-date-range-picker-panel__wrap');\n          var index = $wrap.find('td').index($this);\n          $.sub('datapickerClick', function (e) {\n            $this = $wrap.find('td').eq(index);\n            clickDateRange(_this, $this);\n            $.unsub('datapickerClick');\n          });\n          $.pub('datapickerRenderPicker');\n        } else {\n          clickDateRange(_this, $this);\n        }\n      });\n\n      function clickDateRange(_this, $target) {\n        // var _this = API.getPicker($(this), 'day');\n        var $wrap = _this.picker.$container.find('.c-datepicker-date-range-picker-panel__wrap');\n\n        $wrap.find('td.current.hover').removeClass('current hover');\n        var $current = $wrap.find('td.current');\n        var $activeWrap = $target.parents('.c-datepicker-date-range-picker-panel__wrap');\n        var date = $target.find('.cell').text();\n\n        var $day = _this.picker.$container.find('.c-datePicker__input-day');\n\n        var $time = _this.picker.$container.find('.c-datePicker__input-time');\n\n        var year = $activeWrap.find('.c-datepicker-date-range-picker__header-year span').text();\n        var month = $activeWrap.find('.c-datepicker-date-range-picker__header-month span').text() - 1; // 重选\n\n        if (_this.current >= 2) {\n          $current.removeClass('current');\n          $wrap.find('td.in-range').removeClass('in-range');\n          $current = $wrap.find('td.current');\n          _this.current = 0;\n        }\n\n        if (!_this.current) {\n          $target.addClass('current');\n          var inputVal = moment().set({\n            'year': year,\n            'month': month,\n            'date': date\n          }).format(_this.picker.config.format.split(' ')[0]);\n          $day.val(inputVal);\n          $time.eq(0).val(_this.picker.timeMin);\n          $time.eq(1).val(_this.picker.timeMax);\n          _this.current = 1;\n        } else if (_this.current == 1) {\n          // 选完两个\n          $target.addClass('current');\n          var existDate = $day.eq(0).val();\n          var inputVal = moment().set({\n            'year': year,\n            'month': month,\n            'date': date\n          }).format(_this.picker.config.format.split(' ')[0]);\n          var a = moment(API.newDateFixed(_this.picker, existDate));\n          var b = moment(API.newDateFixed(_this.picker, inputVal)); // 比初选的小，交换\n\n          if (!_this.picker.hasTime) {\n            // 没有十分秒，则选完就隐藏时间插件，并赋值输入框\n            if (b.diff(a) < 0) {\n              var temp = inputVal;\n              inputVal = existDate;\n              existDate = temp;\n            }\n\n            _this.current = 2;\n\n            _this.picker.$inputBegin.val(existDate);\n\n            _this.picker.$inputEnd.val(inputVal);\n\n            _this.picker.datePickerObject.hide('choose');\n          } else {\n            // 有十分秒，则选添加选择范围样式\n            if (b.diff(a) < 0) {\n              $day.eq(0).val(inputVal);\n              $day.eq(1).val(existDate);\n            } else {\n              $day.eq(1).val(inputVal);\n            }\n\n            _this.current = 2;\n\n            _this.addRangeClass();\n          }\n        }\n\n        if (_this.current) {\n          var index = _this.current - 1;\n          API.judgeTimeRange(_this.picker, _this.picker.$container.find('.c-datePicker__input-day').eq(index), _this.picker.$container.find('.c-datePicker__input-time').eq(index), index);\n        }\n      } // 移动渲染范围模式，前提是只有一个current时\n\n\n      this.picker.$container.on('mouseenter', '.c-datepicker-date-table td.available', function () {\n        var _this = API.getPicker($(this), 'day');\n\n        if (_this.current != 1) {\n          return;\n        }\n\n        _this.picker.$container.find('td.current.hover').removeClass('current hover');\n\n        $(this).addClass('current hover');\n        var $wrap = $(this).parents('.c-datepicker-date-range-picker-panel__wrap');\n\n        var $start = _this.picker.$container.find('.c-datePicker__input-day').eq(0);\n\n        var year = $wrap.find('.c-datepicker-date-range-picker__header-year span').text();\n        var month = $wrap.find('.c-datepicker-date-range-picker__header-month span').text();\n        var date = $(this).find('.cell').text();\n        var start = $start.val();\n        var end = year + _this.picker.splitStr + month + _this.picker.splitStr + date; // 需要交换开始结束时间\n\n        if (moment(API.newDateFixed(_this.picker, start)).isAfter(API.newDateFixed(_this.picker, end))) {\n          var temp = start;\n          start = end;\n          end = temp;\n        }\n\n        _this.addRangeClass(moment(API.newDateFixed(_this.picker, start)), moment(API.newDateFixed(_this.picker, end)), true);\n      });\n    },\n    show: function show() {\n      this.picker.$container.find('.c-datepicker-year-table,.c-datepicker-month-table').hide();\n      this.picker.$container.find('.c-datepicker-date-table').show();\n    },\n    hide: function hide() {\n      this.picker.$container.find('.c-datepicker-date-table').hide();\n    },\n    render: function render(year, month, today, baseEnd, reRender) {\n      if (this.picker.config.isRange) {\n        this.renderRange(year, month, today, baseEnd, reRender);\n      } else {\n        this.renderSingle(year, month, today, reRender);\n      }\n    },\n    renderSingle: function renderSingle(year, month, today, reRender) {\n      var html = this.renderHtml(year, month, today);\n      var $year = this.picker.$container.find('.c-datepicker-date-table');\n\n      if ($year.length && !reRender) {\n        this.addCurrentSingle();\n        this.show();\n      } else {\n        var $content = this.picker.$container.find('.c-datepicker-picker__content'); // 日历头部\n\n        var $year = this.picker.$container.find('.c-datepicker-date-picker__header-year span');\n        var $month = this.picker.$container.find('.c-datepicker-date-picker__header-month span');\n        $year.text(year);\n        $month.text(month);\n\n        if (!$content.find('.c-datepicker-date-table').length) {\n          $content.append(html);\n        } else {\n          $content.find('.c-datepicker-date-table').replaceWith(html);\n        }\n\n        if (!this.picker.$container.data('day')) {\n          this.picker.$container.data('day', this);\n        }\n\n        this.addCurrentSingle();\n        this.show();\n\n        if (!reRender) {\n          this.eventSingle();\n        }\n      }\n    },\n    addCurrentSingle: function addCurrentSingle() {\n      var val = this.picker.$input.val();\n\n      if (!val) {\n        return;\n      }\n\n      if (!API.dayReg(this.picker).test(val.split(' ')[0])) {\n        return;\n      }\n\n      var result = API.getTimeFormat(moment(API.newDateFixed(this.picker, val)));\n      var year = this.picker.$container.find('.c-datepicker-date-picker__header-year span').text();\n      var month = this.picker.$container.find('.c-datepicker-date-picker__header-month span').text();\n\n      if (result.year == year && result.month == month) {\n        var $day = this.picker.$container.find('.c-datepicker-date-table td.available');\n        $day.removeClass('current');\n        $day.eq(result.day - 1).addClass('current');\n      }\n    },\n    // 显示和选中值有联动关系，和输入框修改日期有关\n    renderRange: function renderRange(year, month, today, baseEnd, reRender) {\n      var $dateTable = this.picker.$container.find('.c-datepicker-date-table');\n\n      if ($dateTable.length && !reRender) {\n        this.show();\n      } else {\n        var index = 0,\n            distance = 1,\n            countFn = API.maxMonth,\n            initMonth = 1; // 去掉 不需要\n        // if (baseEnd) {\n        //   index = 1;\n        //   distance = -1;\n        //   countFn = API.minMonth;\n        //   initMonth = 12;\n        // }\n        // today[index]\n\n        var html = this.renderHtml(year[index], month[index], false); // 选中间隔月份\n\n        var monthEnd = month[index] + distance;\n        var yearEnd = year[index];\n\n        if (countFn(monthEnd)) {\n          monthEnd = initMonth;\n          yearEnd = yearEnd + distance;\n        }\n\n        var htmlEnd = this.renderHtml(yearEnd, monthEnd, false); // 日历头部\n\n        var $dateTable = this.picker.$container.find('.c-datepicker-date-range-picker__header-year');\n        var $month = this.picker.$container.find('.c-datepicker-date-range-picker__header-month');\n        $dateTable.eq(index).find('span').text(year[index]);\n        $month.eq(index).find('span').text(month[index]);\n        $dateTable.eq(1 - index).find('span').text(yearEnd);\n        $month.eq(1 - index).find('span').text(monthEnd);\n        this.picker.$container.find('.c-datepicker-picker__content').eq(index).html(html);\n        this.picker.$container.find('.c-datepicker-picker__content').eq(1 - index).html(htmlEnd);\n\n        if (!this.picker.$container.data('day')) {\n          this.picker.$container.data('day', this);\n        }\n\n        this.addRangeClass();\n\n        if (!reRender) {\n          this.eventRange();\n        }\n      }\n    },\n    // 上一月下一月，上一年下一年修改显示界面\n    prevNextSingle: function prevNextSingle(moveType, type) {\n      var $year = this.picker.$container.find('.c-datepicker-date-picker__header-year');\n      var $month = this.picker.$container.find('.c-datepicker-date-picker__header-month');\n      var year = Number($year.find('span').text());\n      var month = Number($month.find('span').text());\n      var day = this.picker.$container.find('.c-datePicker__input-day').val();\n      var dayFormat = API.getTimeFormat(moment(API.newDateFixed(this.picker, day)));\n      var count = 1;\n\n      if (moveType === 'prev') {\n        count = -1;\n      }\n\n      if (type === 'year') {\n        year = year + count;\n      } else if (type === 'month') {\n        month = month + count;\n        var result = API.fillMonth(month, year);\n        month = result.month;\n        year = result.year;\n      }\n\n      var date = false;\n\n      if (dayFormat.year == year && dayFormat.month == month) {\n        date = dayFormat.day;\n      }\n\n      var html = this.renderHtml(year, month, date); // 日历头部\n\n      $year.find('span').text(year);\n      $month.find('span').text(month);\n      var $content = this.picker.$container.find('.c-datepicker-picker__content');\n      var $table = $content.find('.c-datepicker-date-table');\n      this.picker.$container.find('.c-datepicker-month-table,.c-datepicker-year-table').hide();\n\n      if ($table.length) {\n        $table.replaceWith(html);\n      } else {\n        $content.append(html);\n      }\n    },\n    // 上一月下一月，上一年下一年修改显示界面\n    prevNextRender: function prevNextRender(moveType, type) {\n      var $year = this.picker.$container.find('.c-datepicker-date-range-picker__header-year');\n      var $month = this.picker.$container.find('.c-datepicker-date-range-picker__header-month');\n      var year = Number($year.eq(0).find('span').text());\n      var month = Number($month.eq(0).find('span').text());\n      var count = 1;\n      var endYear, endMonth;\n\n      if (moveType === 'prev') {\n        count = -1;\n      }\n\n      if (type === 'year') {\n        year = year + count;\n      } else if (type === 'month') {\n        month = month + count;\n      }\n\n      var result = API.fillMonth(month, year);\n      month = result.month;\n      year = result.year;\n      endMonth = month + 1;\n      var endResult = API.fillMonth(endMonth, year);\n      endMonth = endResult.month;\n      endYear = endResult.year;\n      var html = this.renderHtml(year, month, false);\n      var htmlEnd = this.renderHtml(endYear, endMonth, false); // 日历头部\n\n      $year.eq(0).find('span').text(year);\n      $month.eq(0).find('span').text(month);\n      $year.eq(1).find('span').text(endYear);\n      $month.eq(1).find('span').text(endMonth);\n      this.picker.$container.find('.c-datepicker-picker__content').eq(0).html(html);\n      this.picker.$container.find('.c-datepicker-picker__content').eq(1).html(htmlEnd);\n      this.addRangeClass(false, false, true);\n    },\n    // 拼接day的html\n    renderHtml: function renderHtml(year, month, activeDay) {\n      var _moment = moment();\n\n      month = month || _moment.month() + 1;\n      year = year || _moment.year();\n      var today = _moment.month() + 1 === month && _moment.year() === year ? _moment.date() : '';\n      var prevMonthDay = API.getMonthDay(month - 1, year);\n      var day = API.getMonthDay(month, year);\n      var weekday = moment().set({\n        'year': year,\n        'month': month - 1,\n        'date': 1\n      }).weekday();\n      var weekdayLast = moment().set({\n        'year': year,\n        'month': month - 1,\n        'date': day\n      }).weekday(); // var html = DAYHEADER;\n\n      var nameOptions = $.fn.datePicker.dates[this.picker.language];\n      var html = RENDERAPI.dayHeader(nameOptions);\n      var min = 1;\n      var temp = '';\n      var row = 0; // prev-month\n\n      if (weekday != 0) {\n        for (var prev = weekday - 1; prev >= 0; prev--) {\n          var className = 'prev-month';\n          temp += RENDERAPI.tdTpl(className, prevMonthDay - prev);\n\n          if ((weekday - prev) % 7 === 0) {\n            html += '<tr>' + temp + '</tr>';\n            temp = '';\n            row += 1;\n          }\n        }\n      }\n\n      var begin = weekday % 7; // active day \n\n      var hasMin = this.picker.minJson ? true : false;\n      var hasMax = this.picker.maxJson ? true : false;\n      var minMonth = hasMin ? moment(API.newDateFixed(this.picker, this.picker.minJson.year + this.picker.splitStr + this.picker.minJson.month + this.picker.splitStr + 1)) : false;\n      var maxMonth = hasMax ? moment(API.newDateFixed(this.picker, this.picker.maxJson.year + this.picker.splitStr + this.picker.maxJson.month + this.picker.splitStr + 1)) : false;\n      var disabledName = '';\n      var isSame = false;\n      var nowDate = moment(API.newDateFixed(this.picker, year + this.picker.splitStr + month + this.picker.splitStr + 1)); // 不在范围内\n\n      if (hasMin && nowDate.isBefore(minMonth) || hasMax && nowDate.isAfter(maxMonth)) {\n        disabledName = ' disabled';\n      } else if (hasMin && nowDate.isSame(minMonth) || hasMax && nowDate.isSame(maxMonth)) {\n        isSame = true;\n        var minDay, maxDay;\n\n        if (hasMin && hasMax && maxMonth.isSame(minMonth)) {\n          minDay = this.picker.minJson.day;\n          maxDay = this.picker.maxJson.day;\n        } else if (hasMin && nowDate.isSame(minMonth)) {\n          minDay = this.picker.minJson.day;\n          maxDay = 32;\n        } else if (hasMax && nowDate.isSame(maxMonth)) {\n          minDay = 0;\n          maxDay = this.picker.maxJson.day;\n        }\n      }\n\n      for (var index = 0; index < day; index++) {\n        var className = 'available' + disabledName;\n\n        var _val = min + index;\n\n        if (_val === today) {\n          className += ' today';\n        }\n\n        if (_val === activeDay) {\n          className += ' current';\n        }\n\n        if (isSame && (_val < minDay || _val > maxDay)) {\n          className += ' disabled';\n        }\n\n        temp += RENDERAPI.tdTpl(className, _val);\n\n        if ((begin + index + 1) % 7 === 0) {\n          html += '<tr>' + temp + '</tr>';\n          temp = ''; // 兼容刚好换行的bug\n\n          if (index != day - 1) {\n            row += 1;\n          }\n        }\n      }\n\n      begin = (weekday + day) % 7; // next-month\n\n      var nextMax = (6 - row - 1) * 7 + (6 - weekdayLast);\n\n      for (var next = 0; next < nextMax; next++) {\n        var className = 'next-month';\n        temp += RENDERAPI.tdTpl(className, 1 + next);\n\n        if ((begin + next + 1) % 7 === 0) {\n          html += '<tr>' + temp + '</tr>';\n          temp = '';\n        }\n      }\n\n      html = RENDERAPI.tableTpl('c-datepicker-date-table', html);\n      return html;\n    },\n    // 添加时间范围类名\n    addRangeClass: function addRangeClass(defaultStart, defaultEnd, isHover) {\n      var $wrap = this.picker.$container.find('.c-datepicker-date-range-picker-panel__wrap');\n      $wrap.find('td.available').removeClass('in-range start-date end-date');\n      var $days = this.picker.$container.find('.c-datePicker__input-day');\n      var $years = this.picker.$container.find('.c-datepicker-date-range-picker__header-year');\n      var $months = this.picker.$container.find('.c-datepicker-date-range-picker__header-month');\n      var start = defaultStart || $days.eq(0).val();\n      var end = defaultEnd || $days.eq(1).val();\n\n      if (!start || !end) {\n        return;\n      } // 不是hover的时候\n\n\n      if (!isHover) {\n        this.current = 2;\n      }\n\n      var startMoment = defaultStart || moment(API.newDateFixed(this.picker, $days.eq(0).val()));\n      var endMoment = defaultEnd || moment(API.newDateFixed(this.picker, $days.eq(1).val()));\n      var startYear = $years.eq(0).find('span').text();\n      var endYear = $years.eq(1).find('span').text();\n      var startMonth = $months.eq(0).find('span').text();\n      var endMonth = $months.eq(1).find('span').text();\n      var startRangeDate = startYear + this.picker.splitStr + startMonth + this.picker.splitStr + 1;\n      var endRangeDate = endYear + this.picker.splitStr + endMonth + this.picker.splitStr + API.getMonthDay(endMonth, endYear);\n      var isStartBetween = !(startMoment.isBefore(API.newDateFixed(this.picker, startRangeDate)) || startMoment.isAfter(API.newDateFixed(this.picker, endRangeDate)));\n      ;\n      var isEndBetween = !(endMoment.isBefore(API.newDateFixed(this.picker, startRangeDate)) || endMoment.isAfter(API.newDateFixed(this.picker, endRangeDate)));\n      var index; // 所选值不在显示范围内\n\n      var isBefore = startMoment.isBefore(API.newDateFixed(this.picker, startRangeDate)) && startMoment.isBefore(API.newDateFixed(this.picker, endRangeDate)) && endMoment.isBefore(API.newDateFixed(this.picker, startRangeDate)) && endMoment.isBefore(API.newDateFixed(this.picker, endRangeDate));\n      var isAfter = startMoment.isAfter(API.newDateFixed(this.picker, startRangeDate)) && startMoment.isAfter(API.newDateFixed(this.picker, endRangeDate)) && endMoment.isAfter(API.newDateFixed(this.picker, startRangeDate)) && endMoment.isAfter(API.newDateFixed(this.picker, endRangeDate)); // 当前显示范围在所选范围外\n\n      if (isAfter || isBefore) {\n        return;\n      } // 开始值在范围内\n\n\n      if (isStartBetween) {\n        index = startMoment.month() + 1 == startMonth ? 0 : 1;\n        $wrap.eq(index).find('td.available').eq(startMoment.date() - 1).addClass('current start-date');\n      } // 结束值在范围内\n\n\n      if (isEndBetween) {\n        index = endMoment.month() + 1 == startMonth ? 0 : 1;\n        $wrap.eq(index).find('td.available').eq(endMoment.date() - 1).addClass('current end-date');\n      }\n\n      var $current = $wrap.find('td.current');\n      var $start = $wrap.find('.start-date');\n      var $end = $wrap.find('.end-date');\n      $current.addClass('in-range'); // 选中的都在\n      // 同一个\n\n      if ($start.is($end)) {\n        $start.addClass('in-range');\n        return;\n      } else if ($current.length === 2) {\n        var $startTr = $start.parents('tr');\n        var $endTr = $end.parents('tr'); // 同一页\n\n        if ($start.parents('.c-datepicker-date-range-picker-panel__wrap').is($end.parents('.c-datepicker-date-range-picker-panel__wrap'))) {\n          // 同一行\n          if ($startTr.is($endTr)) {\n            var $tds = $start.nextAll('td.available');\n            $tds.each(function (i, _td) {\n              $(_td).addClass('in-range');\n\n              if ($(_td).is($end)) {\n                return false;\n              }\n            });\n            return;\n          }\n\n          $start.nextAll('td.available').addClass('in-range');\n          $end.prevAll('td.available').addClass('in-range');\n          var $startTrs = $startTr.nextAll('tr');\n          var $endTr = $endTr.prev('tr'); // 上下行，则不用继续\n\n          if ($startTr.is($endTr)) {\n            return;\n          } // 多行\n\n\n          $startTrs.each(function (i, tr) {\n            $(tr).find('td.available').addClass('in-range');\n\n            if ($(tr).is($endTr)) {\n              return false;\n            }\n          });\n          return;\n        } // 不同页\n\n\n        $start.nextAll('td.available').addClass('in-range');\n        $end.prevAll('td.available').addClass('in-range');\n        $startTr.nextAll('tr').find('td.available').addClass('in-range');\n        $endTr.prevAll('tr').find('td.available').addClass('in-range');\n      } else if ($start.length) {\n        // 只有开始选中\n        var $startTr = $start.parents('tr');\n        $start.nextAll('td.available').addClass('in-range');\n        $startTr.nextAll('tr').find('td.available').addClass('in-range');\n\n        if (index === 0) {\n          $wrap.eq(1).find('td.available').addClass('in-range');\n        }\n      } else if ($end.length) {\n        // 只有结束选中\n        var $endTr = $end.parents('tr');\n        $end.prevAll('td.available').addClass('in-range');\n        $endTr.prevAll('tr').find('td.available').addClass('in-range');\n\n        if (index === 1) {\n          $wrap.eq(0).find('td.available').addClass('in-range');\n        }\n      } else {\n        $wrap.find('td.available').addClass('in-range');\n      }\n    }\n  });\n  /*==============END DAY============*/\n\n  /*==============BEGIN TIME============*/\n  // 时分秒\n\n  function Time(picker) {\n    this.picker = picker;\n    this.init();\n  }\n\n  $.extend(Time.prototype, {\n    init: function init() {},\n    event: function event() {\n      // 时分秒取消\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.cancel', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        var $time = _this.picker.activeTimeWrap.find('.c-datePicker__input-time');\n\n        var index = _this.picker.$container.find('.c-datePicker__input-time').index($time);\n\n        if (!_this.picker.config.isRange) {\n          var day = _this.picker.$container.find('.c-datePicker__input-day').eq(index).val();\n\n          _this.picker.$input.val(day + ' ' + _this.prevValue);\n        }\n\n        _this.picker.$container.find('.c-datePicker__input-time').eq(index).val(_this.prevValue);\n\n        _this.hide();\n      }); // 时分秒确定\n\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.confirm', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        _this.hide();\n      }); // 0点\n\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.min', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        _this.updateTimeInput(_this.picker.timeMin);\n      }); // 23点\n\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.max', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        _this.updateTimeInput(_this.picker.timeMax);\n      }); // 点击隐藏\n\n      this.picker.$container.on('click', function () {\n        var _this = $(this).data('time');\n\n        _this.hide();\n      });\n      var timerArr = {\n        timer0: '',\n        timer1: '',\n        timer2: ''\n      }; // 滚动选择时分秒\n\n      this.picker.$container.find('.c-datepicker-scrollbar__wrap').scroll(function () {\n        var _this = API.getPicker($(this), 'time');\n\n        var index = _this.picker.$container.find('.c-datepicker-scrollbar__wrap').index($(this)); // 兼容滚动延时，导致下一个时间滚动清除掉上一个的timer,所以分开是三个\n\n\n        clearTimeout(timerArr['timer' + index]);\n        timerArr['timer' + index] = setTimeout(function () {\n          var top = $(this).scrollTop();\n          var num = Math.round(top / 32);\n          var len = $(this).find('li').length - 1;\n\n          if (num >= len) {\n            num = len;\n          }\n\n          top = num * 32;\n          $(this).scrollTop(top);\n\n          var index = _this.picker.activeTimeWrap.find('.c-datepicker-scrollbar__wrap').index($(this));\n\n          var $time = _this.picker.activeTimeWrap.find('.c-datePicker__input-time');\n\n          var day = _this.picker.activeTimeWrap.find('.c-datePicker__input-day').val();\n\n          var val = $time.val();\n          val = val.split(':');\n          val[index] = API.fillTime(num);\n          val = val.join(':');\n          $time.val(val);\n\n          if (!_this.picker.config.isRange) {\n            // 更新input val\n            _this.picker.$input.val(day + ' ' + val);\n          }\n        }.bind(this), 100);\n      });\n    },\n    updateTimeInput: function updateTimeInput(val) {\n      this.picker.activeTimeWrap.find('.c-datePicker__input-time').val(val);\n\n      if (!this.picker.config.isRange) {\n        var day = this.picker.$input.val().split(' ')[0];\n        this.picker.$input.val(day + ' ' + val);\n      } // this.updateTimePanel();\n\n    },\n    updateTimePanel: function updateTimePanel(isShow) {\n      var $wrap = this.picker.activeTimeWrap.find('.c-datepicker-scrollbar__wrap');\n      var val = this.picker.activeTimeWrap.find('.c-datePicker__input-time').val();\n      var format = this.picker.config.format.split(' ')[1];\n      var regText = format.replace(/HH/, '[0-9]{2}').replace(/(mm|ss)/g, '[0-9]{2}');\n      var reg = new RegExp('^' + regText + '$');\n      var isMatch = reg.test(val); // 判断符合时间格式\n\n      if (isMatch) {\n        // 兼容第一次打开才赋值\n        if (isShow) {\n          this.prevValue = val;\n        }\n\n        val = val.split(':');\n        $.each($wrap, function (i, el) {\n          $(el).scrollTop(Number(val[i]) * 32).addClass('active');\n        });\n      }\n\n      return isMatch;\n    },\n    show: function show() {\n      this.picker.activeTimeWrap.find('.c-datepicker-time-panel').show();\n      this.updateTimePanel(true);\n    },\n    hide: function hide() {\n      this.picker.$container.find('.c-datepicker-time-panel').hide();\n    },\n    render: function render(type, hour, minute, second) {\n      if (this.picker.config.isRange) {\n        this.renderRange(type, hour, minute, second);\n      } else {\n        this.renderSingle(type, hour, minute, second);\n      }\n    },\n    renderSingle: function renderSingle(type, hour, minute, second) {\n      var html = this.renderHtml(type, hour, minute, second);\n      var $time = this.picker.activeTimeWrap.find('.c-datepicker-time-panel'); // 初始化，添加html\n\n      if (!$time.length) {\n        this.picker.activeTimeWrap.find('.c-datepicker-date-picker__editor-wrap').eq(1).append(html);\n        this.picker.$container.data('time', this);\n        this.event();\n        this.show();\n      } else {\n        // 已添加，显示\n        this.show();\n      }\n    },\n    renderRange: function renderRange(type, hour, minute, second) {\n      var html = this.renderHtml(type, hour, minute, second);\n      var $time = this.picker.activeTimeWrap.find('.c-datepicker-time-panel'); // 初始化，添加html\n\n      if (!$time.length) {\n        var $content = this.picker.$container.find('.c-datepicker-date-range-picker__time-content');\n        $content.eq(0).find('.c-datepicker-date-range-picker__editor-wrap').eq(1).append(html);\n        $content.eq(1).find('.c-datepicker-date-range-picker__editor-wrap').eq(1).append(html);\n        this.picker.$container.find('.c-datepicker-time-panel').hide();\n        this.picker.$container.data('time', this);\n        this.event();\n        this.show();\n      } else {\n        // 已添加，显示\n        this.show();\n      }\n    },\n    renderHtml: function renderHtml(type, hour, minute, second) {\n      hour = hour || moment().hour();\n      minute = minute || moment().minute();\n      second = second || moment().second();\n      var li = '';\n      var html = ''; // 时\n\n      if (type[0]) {\n        for (var i = 0; i < 24; i++) {\n          var className = hour === i ? 'active' : '';\n          li += RENDERAPI.timeLiTpl(className, API.fillTime(i));\n        }\n\n        html += RENDERAPI.timeTpl('hour', li);\n        li = '';\n      } // 分\n\n\n      if (type[1]) {\n        for (var j = 0; j < 60; j++) {\n          var className = minute === j ? 'active' : '';\n          li += RENDERAPI.timeLiTpl(className, API.fillTime(j));\n        }\n\n        html += RENDERAPI.timeTpl('minute', li);\n        li = '';\n      } // 秒\n\n\n      if (type[2]) {\n        for (var k = 0; k < 60; k++) {\n          var className = second === k ? 'active' : '';\n          li += RENDERAPI.timeLiTpl(className, API.fillTime(k));\n        }\n\n        html += RENDERAPI.timeTpl('second', li);\n      }\n\n      var nameOptions = $.fn.datePicker.dates[this.picker.language];\n      html = RENDERAPI.timeMainTpl(nameOptions, html);\n      return html;\n    }\n  });\n  /*==============END TIME============*/\n\n  /*==============BEGIN ONLY-TIME============= */\n  // 时分秒\n\n  var TIMEONLYAPI = {\n    getPanelVal: function getPanelVal($parent, index) {\n      var $wrappers = $parent.find('.c-datepicker-time-spinner__wrapper');\n      var valArr = new Array(3);\n      $wrappers.each(function (i, _wrapper) {\n        if (i !== index) {\n          var top = $(_wrapper).find('.c-datepicker-scrollbar__wrap').scrollTop();\n          valArr[i] = API.fillTime(Math.round(top / 32));\n        }\n      });\n      return valArr;\n    },\n    getType: function getType(inputIndex) {\n      return inputIndex === 0 ? 'configBegin' : inputIndex === 1 ? 'configEnd' : 'configMinMax';\n    },\n    checkMinMaxGetVal: function checkMinMaxGetVal(_this, valArr, inputIndex) {\n      var panelVal = valArr.join(':');\n      var type = TIMEONLYAPI.getType(inputIndex);\n      var valSecond = API.countSecond(valArr);\n      var minSecond = _this[type].minSecond;\n      var maxSecond = _this[type].maxSecond;\n\n      if (valSecond < minSecond) {\n        val = _this[type].minVal;\n      } else if (valSecond > maxSecond) {\n        val = _this[type].maxVal;\n      } else {\n        val = panelVal;\n      }\n\n      return val;\n    }\n  }; // 时分秒\n\n  function OnlyTime(picker) {\n    this.picker = picker;\n  }\n\n  $.extend(OnlyTime.prototype, {\n    event: function event() {\n      // 时分秒取消\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.cancel', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        _this.picker.$input.val(_this.prevValue);\n\n        _this.picker.datePickerObject.hide('confirm');\n      }); // 时分秒确定\n\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.confirm', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        _this.picker.datePickerObject.hide('confirm');\n      }); // 0点\n\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.min', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        _this.updateTimeInput(_this.picker.timeMin, $(this));\n      }); // 23点\n\n      this.picker.$container.on('click', '.c-datepicker-time-panel__btn.max', function () {\n        var _this = API.getPicker($(this), 'time');\n\n        _this.updateTimeInput(_this.picker.timeMax, $(this));\n      });\n      var timerArr = {\n        timer0: '',\n        timer1: '',\n        timer2: ''\n      }; // 滚动选择时分秒\n\n      this.picker.$container.find('.c-datepicker-scrollbar__wrap').scroll(function () {\n        var _this = API.getPicker($(this), 'time');\n\n        var config = _this.picker.config;\n        var $parent = $(this).parents('.c-datepicker-date-picker__onlyTime-content');\n\n        var inputIndex = _this.picker.$container.find('.c-datepicker-date-picker__onlyTime-content').index($parent);\n\n        var index = $parent.find('.c-datepicker-scrollbar__wrap').index($(this)); // 当前选中的时分秒\n\n        var valArr = TIMEONLYAPI.getPanelVal($parent, index); // 兼容滚动延时，导致下一个时间滚动清除掉上一个的timer,所以分开是三个\n\n        clearTimeout(timerArr['timer' + index]);\n        timerArr['timer' + index] = setTimeout(function () {\n          var top = $(this).scrollTop();\n          var num = Math.round(top / 32);\n          var len = $(this).find('li').length - 1;\n\n          if (num >= len) {\n            num = len;\n          }\n\n          top = num * 32;\n          $(this).scrollTop(top);\n\n          var $time = _this.picker.$input.eq(inputIndex);\n\n          valArr[index] = API.fillTime(num); // var type = TIMEONLYAPI.getType(inputIndex);\n\n          var panelVal = valArr.join(':'); // 计算当前值与最大最小值的关系,panel显示值和input val 值不一定一样\n\n          var val = TIMEONLYAPI.checkMinMaxGetVal(_this.picker, valArr, inputIndex); // 更新input val\n\n          $time.val(val); // 设置当前不可选部分\n\n          _this.setMinMaxHour(inputIndex);\n\n          _this.setMinMaxDisabled(panelVal, inputIndex); // 滚动修改对应的最大值最小值\n\n\n          if (config.isRange) {\n            var $otherParent = _this.picker.$container.find('.c-datepicker-date-picker__onlyTime-content').eq(1 - inputIndex);\n\n            var otherPanelValArr = TIMEONLYAPI.getPanelVal($otherParent).join(':'); // 根据当前滚动更新另一个的最大最小值\n\n            _this.updateRange(inputIndex, valArr);\n\n            _this.setMinMaxHour(1 - inputIndex); // 根据最大最小值更新不可选部分\n\n\n            _this.setMinMaxDisabled(otherPanelValArr, 1 - inputIndex);\n          }\n        }.bind(this), 100);\n      });\n    },\n    // 更新对应的最大值最小值\n    updateRange: function updateRange(inputIndex, valArr) {\n      var _this = this.picker; // 滚动修改对应的最大值最小值\n\n      var configMinMax = _this.configMinMax;\n      var valSecond = API.countSecond(valArr);\n\n      var getJson = function getJson(valArr) {\n        return {\n          hour: valArr[0],\n          minute: valArr[1],\n          second: valArr[2]\n        };\n      };\n\n      if (inputIndex === 0 && valSecond > configMinMax.minSecond) {\n        // begin\n        _this.configEnd.min = getJson(valArr);\n        _this.configEnd.minVal = valArr.join(':');\n        _this.configEnd.minSecond = API.countSecond(valArr);\n      } else if (inputIndex === 1 && valSecond < configMinMax.maxSecond) {\n        // end\n        _this.configBegin.max = getJson(valArr);\n        _this.configBegin.maxVal = valArr.join(':');\n        _this.configBegin.maxSecond = API.countSecond(valArr);\n      }\n    },\n    // 设置0点，23点\n    updateTimeInput: function updateTimeInput(val, $this) {\n      if (this.picker.config.isRange) {\n        var $parent = $this.parents('.c-datepicker-time-panel');\n        var index = this.picker.$container.find('.c-datepicker-time-panel').index($parent);\n        this.picker.$input.eq(index).val(val);\n        this.updateTimePanel();\n      } else {\n        this.picker.$input.val(val);\n        this.picker.datePickerObject.hide('confirm');\n      }\n    },\n    updateTimePanel: function updateTimePanel(isShow) {\n      var _this = this;\n\n      var format = this.picker.config.format;\n      var regText = format.replace(/HH/, '[0-9]{2}').replace(/(mm|ss)/g, '[0-9]{2}');\n      var reg = new RegExp('^' + regText + '$');\n      var $parents = this.picker.$container.find('.c-datepicker-time-panel');\n      $parents.each(function (index, _parent) {\n        var $wrap = $(_parent).find('.c-datepicker-scrollbar__wrap');\n\n        var val = _this.picker.$input.eq(index).val();\n\n        var isMatch = reg.test(val); // 判断符合时间格式\n\n        if (isMatch) {\n          val = val.split(':');\n          $.each($wrap, function (i, el) {\n            $(el).scrollTop(Number(val[i]) * 32).addClass('active');\n          });\n        }\n      }); // return isMatch;\n    },\n    show: function show() {\n      this.picker.$container.find('.c-datepicker-time-panel').show();\n      this.updateTimePanel(true);\n    },\n    hide: function hide() {\n      this.picker.$container.find('.c-datepicker-time-panel').hide();\n    },\n    render: function render(type, hour, minute, second) {\n      if (this.picker.config.isRange) {\n        this.renderRange(type, hour, minute, second);\n        this.picker.$container.find('.c-datepicker-time-panel__btn.cancel,.c-datepicker-time-panel__btn.confirm').remove();\n      } else {\n        this.renderSingle(type, hour, minute, second);\n      }\n    },\n    renderSingle: function renderSingle(type) {\n      var valBegin = this.picker.$input.val();\n      this.prevValue = valBegin;\n      var time1 = valBegin ? valBegin.split(':') : API.getOnlyTimeFormat(moment());\n      this.picker.$input.val(API.getConcatTime(time1[0], time1[1], time1[2]));\n      var $time = this.picker.$container.find('.c-datepicker-time-panel'); // 初始化，添加html\n\n      if (!$time.length) {\n        var html = DATEPICKERAPI.renderTimePanelHtml(this.picker, type, time1[0], time1[1], time1[2]);\n        this.picker.$container.find('.c-datepicker-date-picker__editor-wrap').append(html);\n        this.picker.$container.data('time', this);\n        this.setMinMaxHour();\n        this.event();\n        this.show();\n      } else {\n        // 已添加，显示\n        this.show();\n      }\n    },\n    renderRange: function renderRange(type) {\n      var valBegin = this.picker.$inputBegin.val();\n      var valEnd = this.picker.$inputEnd.val();\n      this.prevValue = valBegin + ',' + valEnd;\n      var time1 = valBegin ? valBegin.split(':') : API.getOnlyTimeFormat(moment());\n      var time2 = valEnd ? valEnd.split(':') : API.getOnlyTimeFormat(moment());\n      this.picker.$inputBegin.val(API.getConcatTime(time1[0], time1[1], time1[2]));\n      this.picker.$inputEnd.val(API.getConcatTime(time2[0], time2[1], time2[2]));\n      var $time = this.picker.$container.find('.c-datepicker-time-panel'); // 初始化，添加html\n\n      if (!$time.length) {\n        var html1 = DATEPICKERAPI.renderTimePanelHtml(this.picker, type, time1[0], time1[1], time1[2]);\n        var html2 = DATEPICKERAPI.renderTimePanelHtml(this.picker, type, time2[0], time2[1], time2[2]);\n        var $content = this.picker.$container.find('.c-datepicker-date-range-picker__time-content');\n        $content.eq(0).find('.c-datepicker-date-range-picker__editor-wrap').append(html1);\n        $content.eq(1).find('.c-datepicker-date-range-picker__editor-wrap').append(html2); // this.picker.$container.find('.c-datepicker-time-panel').hide();\n\n        this.picker.$container.data('time', this);\n        this.setMinMaxHour();\n        this.event();\n        this.show();\n      } else {\n        // 已添加，显示\n        this.show();\n      }\n    },\n    // 初始化设置小时最大最小\n    setMinMaxHour: function setMinMaxHour(inputIndex) {\n      var _this = this.picker;\n\n      if (!_this.configMinMax.hasMinMax) {\n        return;\n      }\n\n      ;\n\n      var $panel = _this.$container.find('.c-datepicker-time-panel');\n\n      if (inputIndex >= 0) {\n        $panel = $panel.eq(inputIndex);\n      } // 获取对应的最大最小json\n\n\n      var type = TIMEONLYAPI.getType(inputIndex);\n      var hourMax = _this[type].max.hour;\n      var hourMin = _this[type].min.hour;\n      $panel.find('.c-datepicker-time-spinner__item').removeClass('disabled');\n      $panel.each(function (index, _panel) {\n        var $wrap = $(_panel).find('.c-datepicker-scrollbar__wrap').eq(0);\n        $wrap.find('.c-datepicker-time-spinner__item').each(function (k, _item) {\n          if (hourMin && k < hourMin || hourMax && k > hourMax) {\n            $(_item).addClass('disabled');\n          }\n        });\n      });\n    },\n    // panel最大值最小值变化设置\n    setMinMaxDisabled: function setMinMaxDisabled(panelVal, inputIndex) {\n      var _this = this.picker;\n      var hasMinMax = _this.configMinMax.hasMinMax;\n\n      if (!panelVal || !hasMinMax) {\n        return;\n      }\n\n      var addDisable = function addDisable($el) {\n        $el.addClass('disabled');\n      };\n\n      var $panel = _this.$container.find('.c-datepicker-time-panel').eq(inputIndex);\n\n      var $wrap = $panel.find('.c-datepicker-scrollbar__wrap');\n      var $wrapMinute = $wrap.eq(1);\n      var $wrapSecond = $wrap.eq(2);\n      var $wrapMinuteItem = $wrapMinute.find('.c-datepicker-time-spinner__item');\n      var type = inputIndex === 0 ? 'configBegin' : 'configEnd';\n      var minJson = _this[type].min;\n      var maxJson = _this[type].max;\n      var val = panelVal.split(':');\n      val = [Number(val[0]), Number(val[1]), Number(val[2])]; // 重置disabled\n\n      $wrap.each(function (j, _wrap) {\n        if (j !== 0) {\n          $(_wrap).find('.c-datepicker-time-spinner__item').removeClass('disabled');\n        }\n      });\n\n      if ((!minJson.hour || val[0] > minJson.hour) && (!maxJson.hour || val[0] < maxJson.hour)) {\n        // 分秒在可选范围内\n        return;\n      }\n\n      if (minJson.hour && val[0] < minJson.hour || maxJson.hour && val[0] > maxJson.hour) {\n        // 分秒都在不可选范围内\n        $wrap.each(function (j, _wrap) {\n          if (j !== 0) {\n            addDisable($(_wrap).find('.c-datepicker-time-spinner__item'));\n          }\n        });\n      } else if (val[0] === minJson.hour) {\n        // 分等于最小值，秒变化\n        // 设置分钟的不可选\n        $wrapMinuteItem.each(function (j, _item) {\n          if (j < minJson.minute) {\n            addDisable($(_item));\n          }\n        });\n        var $wrapSecondItem = $wrapSecond.find('.c-datepicker-time-spinner__item'); // 秒都在不可选范围内\n\n        if (val[1] < minJson.minute) {\n          addDisable($wrapSecondItem);\n          return;\n        } // 秒都在可选范围内\n\n\n        if (val[1] > minJson.minute) {\n          return;\n        } // 秒部分在可选范围内\n\n\n        if (val[1] === minJson.minute) {\n          $wrapSecondItem.each(function (j, _item) {\n            if (j < minJson.second) {\n              addDisable($(_item));\n            }\n          });\n          return;\n        }\n      } else if (val[0] === maxJson.hour) {\n        // 分等于最大值，秒变化\n        // 设置分钟的不可选\n        $wrapMinuteItem.each(function (j, _item) {\n          if (j > maxJson.minute) {\n            addDisable($(_item));\n          }\n        }); // 秒都在不可选范围内\n\n        var $wrapSecondItem = $wrapSecond.find('.c-datepicker-time-spinner__item');\n\n        if (val[1] > maxJson.minute) {\n          addDisable($wrapSecondItem);\n          return;\n        } // 秒都在可选范围内\n\n\n        if (val[1] < maxJson.minute) {\n          return;\n        } // 秒部分在可选范围内\n\n\n        if (val[1] === maxJson.minute) {\n          $wrapSecondItem.each(function (j, _item) {\n            if (j > maxJson.second) {\n              addDisable($(_item));\n            }\n          });\n          return;\n        }\n      }\n    }\n  });\n  /*================END ONLY-TIME================ */\n\n  /*==============BEGIN PICKER============*/\n  // 点击body关闭\n\n  $('body').on('click.datePicker', function () {\n    $('.c-datepicker-picker').each(function (i, panel) {\n      var _this = $(panel).data('picker');\n\n      if ($(panel).css('display') === 'block') {\n        if (_this.config.isRange && !_this.$inputBegin.val() && !_this.$inputEnd.val()) {\n          $(panel).find('td.available').removeClass('current in-range');\n        }\n\n        if (_this.hasTime) {\n          $(panel).find('.c-datepicker-time-panel').hide();\n        }\n\n        if (_this.onlyTime) {\n          _this.datePickerObject.fixedInputValOnlyTime();\n        } else {\n          _this.datePickerObject.fixedInputVal();\n        }\n\n        _this.$container.data('isShow', false);\n\n        _this.config.hide.call(_this, 'clickBody');\n\n        _this.datePickerObject.betweenHandle();\n      }\n    });\n    $('.c-datepicker-picker').hide();\n  }); // 父级div.c-datepicker-box滚动，日期选择框跟随input滚动\n\n  $('.c-datepicker-box').scroll(scrollSetContainerPos);\n\n  function scrollSetContainerPos() {\n    $('.c-datepicker-picker').each(function (i, panel) {\n      var _this = $(panel).data('picker');\n\n      if ($(panel).css('display') === 'block') {\n        setContainerPos(_this.datePickerObject);\n      }\n    });\n  }\n\n  var DATEPICKERAPI = {\n    // 初始化年月日十分秒panel\n    initShowObject: function initShowObject(_this, dataFormat) {\n      var year, month, dayYear, dayMonth, dayDate;\n\n      if (_this.config.isRange) {\n        // 默认值回填时间插件选择框\n        _this.fillDefault();\n\n        dayYear = [dataFormat[0].year, dataFormat[1].year];\n        dayMonth = [dataFormat[0].month, dataFormat[1].month];\n        dayDate = [dataFormat[0].day, dataFormat[1].day];\n        year = dataFormat[0].year;\n        month = dataFormat[0].month;\n      } else {\n        var inputVal = _this.$input.val();\n\n        year = dataFormat.year;\n        month = dataFormat.month;\n        dayYear = year;\n        dayMonth = month;\n        dayDate = inputVal ? dataFormat.day : false; // 年\n\n        if (_this.params.format[0]) {\n          _this.yearObject = new Year(_this);\n\n          if (!_this.params.format[2] && !_this.params.format[1]) {\n            _this.yearObject.render(year);\n          }\n        } // 月\n\n\n        if (_this.params.format[1]) {\n          _this.monthObject = new Month(_this);\n\n          if (!_this.params.format[2]) {\n            _this.$container.find('.c-datepicker-date-picker__prev-btn.month,.c-datepicker-date-picker__next-btn.month').hide();\n\n            _this.monthObject.render(month);\n          }\n        }\n      } // 日\n\n\n      if (_this.params.format[2]) {\n        _this.dayObject = new Day(_this);\n\n        _this.dayObject.render(dayYear, dayMonth, dayDate);\n      }\n\n      if (_this.params.format[3] || _this.params.format[4] || _this.params.format[5]) {\n        _this.timeObject = new Time(_this);\n      }\n    },\n    // 初始化splitStr，params.format，minJson，maxJson\n    initParams: function initParams(_this) {\n      _this.splitStr = _this.config.format.replace(/[YMDhms:\\s]/g, '').split('')[0];\n      _this.params.format = API.getFormat(_this.config.format); // 最大值最小值判断\n\n      _this.minJson = _this.config.min ? API.getTimeFormat(moment(API.newDateFixed(_this, _this.config.min))) : false;\n      _this.maxJson = _this.config.max ? API.getTimeFormat(moment(API.newDateFixed(_this, _this.config.max))) : false;\n    },\n    renderPicker: function renderPicker(target, isBlur) {\n      var _this = API.getPicker($(target));\n\n      if (_this.config.isRange) {\n        DATEPICKERAPI.renderPickerRange(target, isBlur);\n      } else {\n        DATEPICKERAPI.renderPickerSingle(target, isBlur);\n      }\n    },\n    renderPickerRange: function renderPickerRange(target, isBlur) {\n      var _this = API.getPicker($(target));\n\n      var val = target.value;\n\n      var format = _this.config.format.split(' ')[0];\n\n      var regText = format.replace(/YYYY/, '[0-9]{4}').replace(/(MM|DD)/g, '[0-9]{2}');\n      var reg = new RegExp('^' + regText + '$'); // 判断符合时间格式\n\n      if (reg.test(val)) {\n        var $days = _this.$container.find('.c-datePicker__input-day');\n\n        var $times = _this.$container.find('.c-datePicker__input-time');\n\n        var index = $days.index($(target));\n        var isBaseEnd = index === 1;\n        var anotherVal = $days.eq(1 - index).val();\n\n        var _moment = moment(API.newDateFixed(_this, val));\n\n        var _momentAnother = moment(API.newDateFixed(_this, anotherVal));\n\n        var orderFail = index === 0 ? _moment.isAfter(_momentAnother) : _moment.isBefore(_momentAnother); // 反过来，需要交换\n\n        if (orderFail) {\n          var temp = val;\n          val = anotherVal;\n          anotherVal = temp;\n          _moment = moment(API.newDateFixed(_this, val));\n          _momentAnother = moment(API.newDateFixed(_this, anotherVal));\n          $days.eq(index).val(val);\n          $days.eq(1 - index).val(anotherVal);\n        } // 十分秒重置\n\n\n        if (_this.hasTime && !isBlur) {\n          $times.eq(0).val(_this.timeMin);\n          $times.eq(1).val(_this.timeMax);\n        } // if (_this.dayObject.isBlur) {\n        //   _this.dayObject.isBlur = false;\n        // }\n\n\n        var resultAnother = API.getTimeFormat(_momentAnother);\n        var result = API.getTimeFormat(_moment); // var month = result.month-1;\n        // 最大最小值判断修改\n\n        var resultJson = API.minMaxFill(_this, result, index);\n        result = resultJson.result; // 填充值\n\n        target.value = resultJson.val;\n        var rangeYears = [],\n            rangeMonths = [],\n            rangeDates = [];\n        rangeYears[index] = result.year;\n        rangeMonths[index] = result.month;\n        rangeDates[index] = result.day;\n        rangeYears[1 - index] = resultAnother.year;\n        rangeMonths[1 - index] = resultAnother.month;\n        rangeDates[1 - index] = resultAnother.day;\n\n        _this.dayObject.renderRange(rangeYears, rangeMonths, rangeDates, isBaseEnd, true);\n      }\n    },\n    renderPickerSingle: function renderPickerSingle(target) {\n      var _this = API.getPicker($(target));\n\n      var val = target.value;\n\n      var format = _this.config.format.split(' ')[0];\n\n      var regText = format.replace(/YYYY/, '[0-9]{4}').replace(/(MM|DD)/g, '[0-9]{2}');\n      var reg = new RegExp('^' + regText + '$'); // 判断符合时间格式\n\n      if (reg.test(val)) {\n        var $time = _this.$container.find('.c-datePicker__input-time');\n\n        var _moment = moment(API.newDateFixed(_this, val));\n\n        var result = API.getTimeFormat(_moment); // 最大最小值判断修改\n\n        var resultJson = API.minMaxFill(_this, result, 0);\n        result = resultJson.result;\n        val = resultJson.val; // 填充值\n\n        target.value = val;\n\n        if (_this.hasTime) {\n          val += ' ' + $time.val();\n        }\n\n        _this.$input.val(val);\n\n        _this.dayObject.renderSingle(result.year, result.month, result.day, true);\n      }\n    },\n    cancelBlur: function cancelBlur(_this) {\n      $.unsub('datapickerRenderPicker');\n      _this.isBlur = false;\n    },\n    renderTimePanelHtml: function renderTimePanelHtml(_this, type, hour, minute, second) {\n      hour = hour || moment().hour();\n      minute = minute || moment().minute();\n      second = second || moment().second();\n      var li = '';\n      var html = ''; // 时\n\n      if (type[0]) {\n        for (var i = 0; i < 24; i++) {\n          var className = hour === i ? 'active' : '';\n          li += RENDERAPI.timeLiTpl(className, API.fillTime(i));\n        }\n\n        html += RENDERAPI.timeTpl('hour', li);\n        li = '';\n      } // 分\n\n\n      if (type[1]) {\n        for (var j = 0; j < 60; j++) {\n          var className = minute === j ? 'active' : '';\n          li += RENDERAPI.timeLiTpl(className, API.fillTime(j));\n        }\n\n        html += RENDERAPI.timeTpl('minute', li);\n        li = '';\n      } // 秒\n\n\n      if (type[2]) {\n        for (var k = 0; k < 60; k++) {\n          var className = second === k ? 'active' : '';\n          li += RENDERAPI.timeLiTpl(className, API.fillTime(k));\n        }\n\n        html += RENDERAPI.timeTpl('second', li);\n      }\n\n      var nameOptions = $.fn.datePicker.dates[_this.language];\n      html = RENDERAPI.timeMainTpl(nameOptions, html);\n      return html;\n    },\n    setInitVal: function setInitVal(_this) {\n      _this.params.initBeginVal = _this.$inputBegin.val();\n      _this.params.initEndVal = _this.$inputEnd.val();\n    }\n  };\n\n  function SingleDatePicker(datePickerObject) {\n    this.datePickerObject = datePickerObject;\n    this.datePickerObject.pickerObject = null;\n    this.$input = datePickerObject.$target.find('input');\n    this.config = datePickerObject.config;\n    this.params = {};\n    this.language = this.config.language || 'zh-CN';\n    this.hasTime = this.config.format.split(' ').length > 1;\n\n    if (this.hasTime) {\n      this.timeMin = API.timeVal(this, 'min');\n      this.timeMax = API.timeVal(this, 'max');\n    }\n\n    this.init();\n  }\n\n  $.extend(SingleDatePicker.prototype, {\n    init: function init() {\n      this.initShow();\n      this.event();\n    },\n    initShow: function initShow() {\n      // 初始化splitStr，params.format，minJson，maxJson\n      DATEPICKERAPI.initParams(this);\n      this.params.isYear = this.params.format[0] && !this.params.format[1];\n      this.params.isMonth = this.params.format[0] && this.params.format[1] && !this.params.format[2];\n      var table = '';\n      var inputVal = this.$input.val();\n      var result = inputVal ? moment(API.newDateFixed(this, inputVal)) : moment();\n      var dataFormat = API.getTimeFormat(result);\n      var sidebar = '';\n      var hasSidebar = '';\n      var hasTime = '';\n\n      if (this.params.format[3] || this.params.format[4] || this.params.format[5]) {\n        hasTime = 'has-time';\n      } // 有快捷键-单个还是范围\n\n\n      if (this.config.hasShortcut) {\n        hasSidebar = 'has-sidebar';\n        sidebar = rederSidebar(this);\n      }\n\n      var nameOptions = $.fn.datePicker.dates[this.language];\n      var renderTpl = RENDERAPI.datePickerMainTpl(nameOptions);\n\n      if (this.params.isYear || this.params.isMonth) {\n        renderTpl = renderTpl.replace(/{{footerButton}}/g, RENDERAPI.pickerFooterClearButton(nameOptions));\n      } else {\n        renderTpl = renderTpl.replace(/{{footerButton}}/g, RENDERAPI.pickerFooterNowButton(nameOptions));\n      }\n\n      var $datePickerHtml = $(renderTpl.replace(/{{table}}/g, table).replace(/{{year}}/g, dataFormat.year).replace(/{{month}}/g, dataFormat.month).replace('{{sidebar}}', sidebar).replace('{{hasTime}}', hasTime).replace('{{hasSidebar}}', hasSidebar));\n      $('body').append($datePickerHtml);\n      this.$container = $datePickerHtml;\n      this.$container.data('picker', this);\n      this.$container.addClass('is-' + this.language); // 没有十分秒\n\n      if (!this.hasTime) {\n        this.$container.find('.c-datepicker-date-picker__time-header').hide();\n      } // 初始化年月日十分秒panel\n\n\n      DATEPICKERAPI.initShowObject(this, dataFormat); // 默认值回填时间插件选择框\n\n      var val = this.$input.val().split(' ');\n      this.$container.find('.c-datePicker__input-day').val(val[0]);\n      this.$container.find('.c-datePicker__input-time').val(val[1]);\n\n      if (getMomentWhenEmpty(this).type !== 'active') {\n        this.$container.find('.c-datepicker-picker__btn-now').remove();\n      }\n    },\n    event: function event() {\n      if (this.hasTime) {\n        this.eventHasTime();\n      }\n\n      this.datePickerObject.$target.on('click', function (event) {\n        event.stopPropagation();\n      });\n      this.$container.on('click', function (event) {\n        event.stopPropagation();\n      }); // 点击选择年\n\n      this.$container.on('click', '.c-datepicker-date-picker__header-year', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this));\n\n        if (_this.isBlur) {\n          DATEPICKERAPI.cancelBlur(_this);\n        }\n\n        if ($(this).hasClass('disabled')) {\n          return;\n        }\n\n        var val = _this.$input.val();\n\n        if (!val) {\n          val = moment();\n        } else {\n          val = moment(API.newDateFixed(_this, val));\n        }\n\n        _this.yearObject.render(val.year());\n      }); // 点击选择月\n\n      this.$container.on('click', '.c-datepicker-date-picker__header-month', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this));\n\n        if (_this.isBlur) {\n          DATEPICKERAPI.cancelBlur(_this);\n        }\n\n        if ($(this).hasClass('disabled')) {\n          return;\n        }\n\n        var val = _this.$input.val();\n\n        if (!val) {\n          val = moment();\n        } else {\n          val = moment(API.newDateFixed(_this, val));\n        }\n\n        _this.monthObject.render(val.month() + 1);\n      }); // 下一月\n\n      this.$container.on('click', '.c-datepicker-date-picker__next-btn.month', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this));\n\n        renderYearMonth(_this, 'next', 'month');\n      }); // 上一月\n\n      this.$container.on('click', '.c-datepicker-date-picker__prev-btn.month', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this)); // 操作选择年的翻页\n\n\n        renderYearMonth(_this, 'prev', 'month');\n      }); // 下一年\n\n      this.$container.on('click', '.c-datepicker-date-picker__next-btn.year', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this)); // 操作选择年的翻页\n\n\n        if ($(this).hasClass('is-year')) {\n          var newYear = Number(_this.$container.find('.c-datepicker-year-table td.available').first().find('.cell').text()) + 10;\n\n          _this.yearObject.render(newYear);\n        } else if ($(this).hasClass('is-month')) {\n          var $year = _this.$container.find('.c-datepicker-date-picker__header-year span');\n\n          $year.text(Number($year.text()) + 1);\n\n          _this.monthObject.render();\n        } else {\n          renderYearMonth(_this, 'next', 'year');\n        }\n      }); // 上一年\n\n      this.$container.on('click', '.c-datepicker-date-picker__prev-btn.year', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this)); // 操作选择年的翻页\n\n\n        if ($(this).hasClass('is-year')) {\n          var newYear = Number(_this.$container.find('.c-datepicker-year-table td.available').first().find('.cell').text()) - 10;\n\n          _this.yearObject.render(newYear);\n        } else if ($(this).hasClass('is-month')) {\n          var $year = _this.$container.find('.c-datepicker-date-picker__header-year span');\n\n          $year.text(Number($year.text()) - 1);\n\n          _this.monthObject.render();\n        } else {\n          renderYearMonth(_this, 'prev', 'year');\n        }\n      }); // 兼容blur点击切换年时，blur需要重新渲染data，\n\n      function renderYearMonth(_this, dire, type) {\n        if (_this.isBlur) {\n          _this.dayObject.prevNextSingle(dire, type);\n\n          $.unsub('datapickerRenderPicker');\n          _this.isBlur = false; // $.sub('datapickerClick', function (e) {\n          //   _this.dayObject.prevNextSingle(dire, type);\n          //   $.unsub('datapickerClick');\n          // });\n        } else {\n          _this.dayObject.prevNextSingle(dire, type);\n        }\n      } // 点击此刻\n\n\n      this.$container.on('click', '.c-datepicker-picker__btn-now', function () {\n        var _this = API.getPicker($(this));\n\n        setValue(_this, moment().format(_this.config.format));\n\n        _this.datePickerObject.hide('shortcut');\n      }); // 点击清空\n\n      this.$container.on('click', '.c-datepicker-picker__btn-clear', function () {\n        var _this = API.getPicker($(this));\n\n        _this.clear();\n      }); // 点击快捷选项\n\n      this.$container.on('click', '.c-datepicker-picker__shortcut', function () {\n        var _this = API.getPicker($(this));\n\n        var day = $(this).data('value');\n        var result = moment().add(day, 'day').format(_this.config.format);\n\n        if (_this.hasTime) {\n          var time = $(this).data('time');\n\n          if (time) {\n            result = result.split(' ')[0] + ' ' + time;\n          }\n        }\n\n        setValue(_this, result);\n\n        _this.datePickerObject.hide('shortcut');\n      }); // 点击确定\n\n      this.$container.on('click', '.c-datepicker-picker__link-btn.confirm', function () {\n        var _this = API.getPicker($(this));\n\n        if (!_this.$input.val()) {\n          var _moment = getMomentWhenEmpty(_this).value;\n          setValue(_this, _moment);\n        }\n\n        _this.datePickerObject.hide('confirm');\n      });\n    },\n    eventHasTime: function eventHasTime() {\n      // 输入框修改日期input\n      this.$container.on('keyup', '.c-datePicker__input-time', function () {\n        var _this = API.getPicker($(this)); // 更新显示的time panel值\n\n\n        var isMatch = _this.timeObject.updateTimePanel();\n\n        if (isMatch) {\n          var time = this.value;\n\n          var day = _this.$container.find('.c-datePicker__input-day').val();\n\n          _this.$input.val(day + ' ' + time);\n        }\n      });\n      this.$container.on('click', '.c-datePicker__input-time', function (event) {\n        event.stopPropagation();\n      }); // 修改日期\n\n      this.$container.on('keyup', '.c-datePicker__input-day', function () {\n        DATEPICKERAPI.renderPickerSingle(this);\n      }); // 失焦判断最大值最小值\n\n      this.$container.on('blur', '.c-datePicker__input-day', function (event) {\n        var _this = API.getPicker($(this)); // 修复满足格式但不完全符合的day格式修正\n\n\n        fillDay(_this, $(this));\n        API.judgeTimeRange(_this, $(this), _this.$container.find('.c-datePicker__input-time'));\n      }); // 失焦判断最大值最小值\n\n      this.$container.on('blur', '.c-datePicker__input-time', function (event) {\n        var _this = API.getPicker($(this)); // 修复满足格式但不完全符合的time格式修正\n\n\n        fillTime(_this, $(this));\n        API.judgeTimeRange(_this, _this.$container.find('.c-datePicker__input-day'), $(this));\n      }); // 聚焦时分秒input\n\n      this.$container.on('focus', '.c-datePicker__input-time', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this));\n\n        if (!_this.$input.val() && !this.value) {\n          var now = moment().format(_this.config.format);\n\n          _this.$input.val(now);\n\n          now = now.split(' ');\n\n          _this.$container.find('.c-datePicker__input-day').val(now[0]);\n\n          $(this).val(now[1]);\n        }\n\n        _this.activeTimeWrap = $(this).parents('.c-datepicker-date-picker__time-header');\n        var val = this.value.split(':');\n\n        _this.showTimeSelect(val[0], val[1], val[2]);\n      }); // 聚焦日期input\n\n      this.$container.on('focus', '.c-datePicker__input-day', function () {\n        var _this = API.getPicker($(this));\n\n        if (!_this.$input.val()) {\n          var now = moment().format(_this.config.format).split(' ');\n          $(this).val(now[0]);\n\n          if (now.length > 1) {\n            _this.$container.find('.c-datePicker__input-time').val(now[1]);\n          }\n        }\n      });\n    },\n    clear: function clear() {\n      this.$input.val('');\n      this.$container.find('.c-datePicker__input-day,.c-datePicker__input-time').val('');\n      this.$container.find('td.available').removeClass('current');\n    },\n    show: function show() {\n      // 日\n      if (this.params.format[2]) {\n        var val = API.getRangeTimeFormat(this, this.$input);\n        this.dayObject.render(val.year, val.month, val.day, true);\n      }\n\n      this.$container.show();\n    },\n    reRenderDay: function reRenderDay() {\n      // 日\n      if (this.params.format[2]) {\n        var result = API.getRangeTimeFormat(this, this.$input); // 判断是否选中\n\n        var _val = this.$input.val() ? result.day : false;\n\n        this.dayObject.render(result.year, result.month, _val, true);\n      }\n    },\n    renderYear: function renderYear() {\n      this.yearObject.render();\n    },\n    renderMonth: function renderMonth() {\n      this.monthObject.render();\n    },\n    showTimeSelect: function showTimeSelect(year, month, day) {\n      if (this.params.format[3] || this.params.format[4] || this.params.format[5]) {\n        this.timeObject.render(this.params.format.slice(3), year, month, day);\n      }\n    }\n  }); // 时间范围\n\n  function RangeDatePicker(datePickerObject) {\n    this.datePickerObject = datePickerObject;\n    this.datePickerObject.pickerObject = null;\n    this.$input = datePickerObject.$target.find('input');\n    this.$inputBegin = this.$input.eq(0);\n    this.$inputEnd = this.$input.eq(1);\n    this.config = datePickerObject.config;\n    this.params = {};\n    this.language = this.config.language || 'zh-CN';\n    this.hasTime = this.config.format.split(' ').length > 1;\n\n    if (this.hasTime) {\n      this.timeMin = API.timeVal(this, 'min');\n      this.timeMax = API.timeVal(this, 'max');\n    }\n\n    this.init();\n  }\n\n  $.extend(RangeDatePicker.prototype, {\n    init: function init() {\n      this.initShow();\n      this.event();\n    },\n    initShow: function initShow() {\n      // 初始化splitStr，params.format，minJson，maxJson\n      DATEPICKERAPI.initParams(this);\n      var table = '';\n      var dataFormat = [];\n      dataFormat[0] = API.getRangeTimeFormat(this, this.$input.eq(0));\n      dataFormat[1] = API.getRangeTimeFormat(this, this.$input.eq(1));\n      var sidebar = '';\n      var hasSidebar = '';\n      var hasTime = '';\n\n      if (this.params.format[3] || this.params.format[4] || this.params.format[5]) {\n        hasTime = 'has-time';\n      } // 有快捷键-单个还是范围\n\n\n      if (this.config.hasShortcut) {\n        hasSidebar = 'has-sidebar';\n        sidebar = rederSidebar(this);\n      }\n\n      var nameOptions = $.fn.datePicker.dates[this.language];\n      var $datePickerHtml = $(RENDERAPI.rangePickerMainTpl(nameOptions, hasTime, hasSidebar, dataFormat[1].year, dataFormat[1].month, sidebar, table));\n      $('body').append($datePickerHtml);\n      this.$container = $datePickerHtml;\n      this.$container.data('picker', this);\n      this.$container.addClass('is-' + this.language); // 没有十分秒\n\n      if (!this.hasTime) {\n        this.$container.find('.c-datepicker-date-range-picker__time-header').hide();\n      } // 初始化年月日十分秒panel\n\n\n      DATEPICKERAPI.initShowObject(this, dataFormat);\n    },\n    // 默认值回填时间插件选择框\n    fillDefault: function fillDefault() {\n      var valBegin = this.$inputBegin.val().split(' ');\n      var valEnd = this.$inputEnd.val().split(' ');\n      var $day = this.$container.find('.c-datePicker__input-day');\n      var $time = this.$container.find('.c-datePicker__input-time');\n\n      if (valBegin) {\n        $day.eq(0).val(valBegin[0]);\n        $time.eq(0).val(valBegin[1]);\n      }\n\n      if (valEnd) {\n        $day.eq(1).val(valEnd[0]);\n        $time.eq(1).val(valEnd[1]);\n      }\n    },\n    event: function event() {\n      if (this.hasTime) {\n        this.eventHasTime();\n      }\n\n      this.$container.on('click', function (event) {\n        event.stopPropagation();\n      });\n      this.datePickerObject.$target.on('click', function (event) {\n        event.stopPropagation();\n      }); // 下一月\n\n      this.$container.on('click', '.c-datepicker-date-range-picker__next-btn.month', function () {\n        var _this = API.getPicker($(this));\n\n        renderYearMonth(_this, 'next', 'month');\n      }); // 上一月\n\n      this.$container.on('click', '.c-datepicker-date-range-picker__prev-btn.month', function () {\n        var _this = API.getPicker($(this));\n\n        renderYearMonth(_this, 'prev', 'month');\n      }); // 下一年\n\n      this.$container.on('click', '.c-datepicker-date-range-picker__next-btn.year', function () {\n        var _this = API.getPicker($(this));\n\n        renderYearMonth(_this, 'next', 'year');\n      }); // 上一年\n\n      this.$container.on('click', '.c-datepicker-date-range-picker__prev-btn.year', function () {\n        var _this = API.getPicker($(this));\n\n        renderYearMonth(_this, 'prev', 'year');\n      });\n\n      function renderYearMonth(_this, dire, type) {\n        if (_this.isBlur) {\n          $.sub('datapickerClick', function (e) {\n            _this.dayObject.prevNextRender(dire, type);\n\n            $.unsub('datapickerClick');\n          });\n          $.pub('datapickerRenderPicker');\n        } else {\n          _this.dayObject.prevNextRender(dire, type);\n        }\n      } // 点击清空\n\n\n      this.$container.on('click', '.c-datepicker-picker__btn-clear', function () {\n        var _this = API.getPicker($(this));\n\n        _this.clear();\n      }); // 快捷选项\n\n      this.$container.on('click', '.c-datepicker-picker__shortcut', function () {\n        var _this = API.getPicker($(this));\n\n        var days = $(this).data('value').split(',');\n        var begin = moment().add(days[0], 'day').format(_this.config.format);\n        var end = moment().add(days[1], 'day').format(_this.config.format);\n\n        if (_this.hasTime) {\n          var times = $(this).data('time').split(',');\n\n          if (times[0]) {\n            begin = begin.split(' ')[0] + ' ' + times[0];\n          }\n\n          if (times[1]) {\n            end = end.split(' ')[0] + ' ' + times[1];\n          }\n        }\n\n        _this.$inputBegin.val(begin);\n\n        _this.$inputEnd.val(end);\n\n        _this.datePickerObject.hide('shortcut'); // setValue(_this, result);\n\n      }); // 点击确定\n\n      this.$container.on('click', '.c-datepicker-picker__link-btn.confirm', function () {\n        var _this = API.getPicker($(this));\n\n        var $days = _this.$container.find('.c-datePicker__input-day');\n\n        var $times = _this.$container.find('.c-datePicker__input-time');\n\n        var start = $days.eq(0).val();\n        var end = $days.eq(1).val();\n\n        if (!start || !end) {\n          _this.datePickerObject.hide('confirm');\n\n          return;\n        }\n\n        if (_this.hasTime) {\n          start += ' ' + $times.eq(0).val();\n          end += ' ' + $times.eq(1).val();\n        }\n\n        _this.$inputBegin.val(start);\n\n        _this.$inputEnd.val(end);\n\n        _this.datePickerObject.hide('confirm');\n      });\n    },\n    eventHasTime: function eventHasTime() {\n      // 输入框修改日期input\n      this.$container.on('keyup', '.c-datePicker__input-time', function () {\n        var _this = API.getPicker($(this));\n\n        _this.timeObject.updateTimePanel();\n      }); // 输入框修改日期input\n\n      this.$container.on('keyup', '.c-datePicker__input-day', function () {\n        DATEPICKERAPI.renderPicker(this);\n      });\n      this.$container.on('click', '.c-datePicker__input-time', function (event) {\n        event.stopPropagation();\n      }); // 聚焦时分秒input\n\n      this.$container.on('focus', '.c-datePicker__input-time', function (event) {\n        event.stopPropagation();\n\n        var _this = API.getPicker($(this));\n\n        if (!_this.$input.val() && !this.value) {\n          var now = moment().format(_this.config.format); // _this.$input.val(now);\n\n          now = now.split(' ');\n\n          _this.$container.find('.c-datePicker__input-day').val(now[0]);\n\n          _this.$container.find('.c-datePicker__input-time').val(now[1]);\n        }\n\n        _this.activeTimeWrap = $(this).parents('.c-datepicker-date-range-picker__time-content');\n\n        _this.showTimeSelect();\n\n        $(this).trigger('keyup');\n      }); // 聚焦日期input\n\n      this.$container.on('focus', '.c-datePicker__input-day,.c-datePicker__input-time', function () {\n        var _this = API.getPicker($(this));\n\n        var $day = _this.$container.find('.c-datePicker__input-day');\n\n        if (!$(this).val()) {\n          var now = moment().format(_this.config.format).split(' ');\n          $day.val(now[0]);\n\n          if (now.length > 1) {\n            _this.$container.find('.c-datePicker__input-time').val(now[1]);\n          }\n        }\n      }); // day失焦判断最大值最小值\n\n      this.$container.on('blur', '.c-datePicker__input-day', function (event) {\n        var _this = API.getPicker($(this));\n\n        var index = _this.$container.find('.c-datePicker__input-day').index($(this)); // 修复满足格式但不完全符合的day格式修正\n\n\n        fillDay(_this, $(this));\n        API.judgeTimeRange(_this, $(this), _this.$container.find('.c-datePicker__input-time').eq(index), index);\n      }); // time失焦判断最大值最小值\n\n      this.$container.on('blur', '.c-datePicker__input-time', function (event) {\n        var _this = API.getPicker($(this));\n\n        var index = _this.$container.find('.c-datePicker__input-time').index($(this)); // 修复满足格式但不完全符合的time格式修正（先修正，后比较大小）\n\n\n        fillTime(_this, $(this));\n        API.judgeTimeRange(_this, _this.$container.find('.c-datePicker__input-day').eq(index), $(this), index);\n      });\n    },\n    show: function show() {\n      this.fillDefault();\n      var dataFormat = [];\n      dataFormat[0] = API.getRangeTimeFormat(this, this.$input.eq(0));\n      dataFormat[1] = API.getRangeTimeFormat(this, this.$input.eq(1));\n      var yearArr = [dataFormat[0].year, dataFormat[1].year];\n      var monthArr = [dataFormat[0].month, dataFormat[1].month];\n      var dayArr = [dataFormat[0].day, dataFormat[1].day]; // 日\n\n      if (this.params.format[2]) {\n        this.dayObject.render(yearArr, monthArr, dayArr, false, true);\n      }\n\n      DATEPICKERAPI.setInitVal(this);\n      this.$container.show();\n    },\n    clear: function clear() {\n      this.$inputBegin.val('');\n      this.$inputEnd.val('');\n      this.$container.find('.c-datePicker__input-day,.c-datePicker__input-time').val('');\n      this.$container.find('td.available').removeClass('current in-range');\n    },\n    renderYear: function renderYear() {\n      this.yearObject.render();\n    },\n    renderMonth: function renderMonth() {\n      this.monthObject.render();\n    },\n    showTimeSelect: function showTimeSelect() {\n      if (this.params.format[3] || this.params.format[4] || this.params.format[5]) {\n        this.timeObject.render(this.params.format.slice(3));\n      }\n    }\n  });\n  /**===================BEGIN PICKER-ONLY-TIME ======================= */\n  // 时间范围\n\n  function RangeDatePickerTime(datePickerObject) {\n    this.datePickerObject = datePickerObject;\n    this.datePickerObject.pickerObject = null;\n    this.$input = datePickerObject.$target.find('input');\n    this.$inputBegin = this.$input.eq(0);\n    this.$inputEnd = this.$input.eq(1);\n    this.config = datePickerObject.config;\n    this.hasTime = true;\n    this.onlyTime = true;\n    this.params = {};\n    this.language = this.config.language || 'zh-CN';\n    this.timeMin = API.timeVal(this, 'min');\n    this.timeMax = API.timeVal(this, 'max');\n    this.configMinMax = API.getOnlyTimeMinMax(this);\n    this.configBegin = $.extend({}, this.configMinMax);\n    this.configEnd = $.extend({}, this.configMinMax);\n    this.init();\n  }\n\n  $.extend(RangeDatePickerTime.prototype, {\n    init: function init() {\n      this.initShow();\n      this.event();\n    },\n    initShow: function initShow() {\n      // 初始化splitStr，params.format，minJson，maxJson\n      DATEPICKERAPI.initParams(this);\n      var hasTime = 'has-time only-time';\n      var nameOptions = $.fn.datePicker.dates[this.language];\n      var TPL = this.config.isRange ? RENDERAPI.rangePickerMainOnlyTimeTpl(nameOptions, hasTime) : RENDERAPI.datePickerMainOnlyTimeTpl(hasTime); // var TPL = this.config.isRange ? RANGEPICKERMAINONLYTIMETPL : DATEPICKERMAINOLNLYTIMETPL;\n\n      var $datePickerHtml = $(TPL.replace(/{{table}}/g, ''));\n      $('body').append($datePickerHtml);\n      this.$container = $datePickerHtml;\n      this.$container.data('picker', this);\n      this.$container.addClass('is-' + this.language); // 初始化年月日十分秒panel\n\n      this.timeObject = new OnlyTime(this);\n    },\n    event: function event() {\n      this.$container.on('click', function (event) {\n        event.stopPropagation();\n      });\n      this.datePickerObject.$target.on('click', function (event) {\n        event.stopPropagation();\n      }); // 点击清空\n\n      this.$container.on('click', '.c-datepicker-picker__btn-clear', function () {\n        var _this = API.getPicker($(this));\n\n        _this.clear();\n\n        _this.datePickerObject.hide('confirm');\n      }); // 点击清空\n\n      this.$container.on('click', '.c-datepicker-picker__btn-cancel', function () {\n        var _this = API.getPicker($(this));\n\n        if (_this.config.isRange) {\n          var valArr = _this.timeObject.prevValue.split(',');\n\n          _this.$inputBegin.val(valArr[0]);\n\n          _this.$inputEnd.val(valArr[1]);\n        }\n\n        _this.datePickerObject.hide('confirm');\n      }); // 点击确定\n\n      this.$container.on('click', '.c-datepicker-picker__link-btn.confirm', function () {\n        var _this = API.getPicker($(this));\n\n        _this.datePickerObject.hide('confirm');\n      });\n    },\n    show: function show() {\n      this.$container.show();\n      DATEPICKERAPI.setInitVal(this);\n      this.timeObject.render(this.params.format.slice(3));\n    },\n    clear: function clear() {\n      this.$inputBegin.val('');\n      this.$inputEnd.val('');\n    }\n  });\n  /**=================END PICKER-ONLY-TIME======================== */\n\n  function DatePicker(options, ele) {\n    // this.$container = $('.c-datepicker-picker');\n    this.$target = ele;\n    this.config = $.extend({}, defaultOptions, options);\n    this.params = {}; // 只有时分秒，没有日期\n\n    this.onlyTime = API.onlytimeReg(this.config.format);\n    this.init();\n  }\n\n  $.extend(DatePicker.prototype, {\n    init: function init() {\n      if (!this.config.isRange) {\n        this.pickerObject = this.onlyTime ? new RangeDatePickerTime(this) : new SingleDatePicker(this);\n      } else {\n        this.pickerObject = this.onlyTime ? new RangeDatePickerTime(this) : new RangeDatePicker(this);\n      }\n\n      this.pickerObject.$input.data('datepicker', this);\n      this.event();\n    },\n    event: function event() {\n      this.pickerObject.$input.on('click', function () {\n        var _this = $(this).data('datepicker');\n\n        if (!_this.pickerObject.$container.data('isShow')) {\n          // 重置状态\n          $('.c-datepicker-picker').data('isShow', false);\n\n          _this.pickerObject.$container.data('isShow', true);\n\n          _this.show();\n        }\n      });\n      this.pickerObject.$input.on('focus', function () {\n        var _this = $(this).data('datepicker');\n\n        _this.initInputVal = this.value;\n      }); // 兼容输入框失去焦点\n\n      this.pickerObject.$container.on('click', function () {\n        var _this = $(this).data('picker');\n\n        if (_this.isBlur) {\n          $.unsub('datapickerClick');\n          $.pub('datapickerRenderPicker');\n          _this.isBlur = false;\n        }\n      }); // 输入框失去焦点\n\n      this.pickerObject.$input.on('blur', function () {\n        if (!this.value) {\n          return;\n        }\n\n        var _this = $(this).data('datepicker');\n\n        var index = _this.pickerObject.$input.index($(this));\n\n        var valArr = this.value.split(' ');\n        var day = valArr[0];\n        var $container = _this.pickerObject.$container; // 有十分秒\n\n        if (_this.pickerObject.hasTime) {\n          var time = _this.onlyTime ? API.timeCheck(valArr[0]) : valArr[1] ? API.timeCheck(valArr[1]) : false;\n          var $time = $container.find('.c-datePicker__input-time');\n          var timeResult = time && time.match(API.timeReg(_this));\n\n          if (_this.onlyTime) {\n            // 无日期只有时分秒\n            if (!time || !timeResult) {\n              time = _this.initInputVal;\n              this.value = _this.initInputVal;\n            } else {\n              if (timeResult) {\n                time = timeResult[5] ? timeResult[1] + ':' + API.fillTime(timeResult[3]) + ':' + API.fillTime(timeResult[5]) : timeResult[1] + ':' + API.fillTime(timeResult[3]);\n              }\n\n              this.value = time;\n            }\n          } else {\n            var dayReg = API.dayReg(_this.pickerObject);\n            var $day = $container.find('.c-datePicker__input-day');\n            var dayResult = day.match(dayReg);\n\n            if (!time || !timeResult || !dayResult) {\n              day = _this.initInputVal.split(' ')[0];\n              time = _this.initInputVal.split(' ')[1];\n              this.value = _this.initInputVal;\n            } else {\n              if (dayResult) {\n                // 兼容201808变为2018-00-08的情况\n                dayResult = API.fixedFill(dayResult);\n                day = dayResult[1] + _this.pickerObject.splitStr + API.fillTime(dayResult[3]) + _this.pickerObject.splitStr + API.fillTime(dayResult[5]);\n              }\n\n              if (timeResult) {\n                time = timeResult[5] ? timeResult[1] + ':' + API.fillTime(timeResult[3]) + ':' + API.fillTime(timeResult[5]) : timeResult[1] + ':' + API.fillTime(timeResult[3]);\n              }\n\n              this.value = day + ' ' + time;\n            }\n\n            $time.eq(index).val(time);\n            $day.eq(index).val(day); // 兼容失去焦点，点击选择日期\n\n            _this.pickerObject.isBlur = true; // 逻辑：先blur-绑定重新渲染date panel事件-触发选择日期或年月切换等事件-发布重新渲染事件|取消发布事件\n            // 处理的类型有，点击切换上下一年月，点击年月选择，选择日期，点击piker其他\n\n            $.sub('datapickerRenderPicker', function () {\n              if (!_this.onlyTime) {\n                DATEPICKERAPI.renderPicker($day.eq(index)[0], true);\n              }\n\n              _this.pickerObject.isBlur = false;\n              $.pub('datapickerClick');\n              $.unsub('datapickerRenderPicker');\n            });\n          }\n        } else {\n          // 没有十分秒\n          // 年月格式\n          if (_this.pickerObject.params.isMonth) {\n            var _moment = moment(API.newDateFixed(_this.pickerObject, day + _this.pickerObject.splitStr + '01'));\n\n            var result = API.getTimeFormat(_moment);\n            var resultJson = API.minMaxFill(_this.pickerObject, result, 0, 'month');\n            val = resultJson.val;\n            $(this).val(val); // _this.hide();\n          } else if (_this.pickerObject.params.isYear) {\n            if (_this.config.min && day < _this.config.min) {\n              day = _this.config.min;\n            }\n\n            if (_this.config.max && day > _this.config.max) {\n              day = _this.config.max;\n            }\n\n            $(this).val(day);\n          } else {\n            var dayReg = API.dayReg(_this.pickerObject);\n            var dayResult = day.match(dayReg);\n\n            if (!dayResult) {\n              // 不匹配\n              this.value = _this.initInputVal;\n            } else {\n              // 匹配\n              // 兼容201808变为2018-00-08的情况\n              dayResult = API.fixedFill(dayResult);\n              day = dayResult[1] + _this.pickerObject.splitStr + API.fillTime(dayResult[3]) + _this.pickerObject.splitStr + API.fillTime(dayResult[5]);\n              this.value = day;\n            }\n          }\n        }\n      });\n    },\n    show: function show() {\n      setContainerPos(this);\n      $('.c-datepicker-picker').hide();\n      this.pickerObject.show();\n      this.config.show.call(this.pickerObject);\n    },\n    hide: function hide(type) {\n      // 判断输入框没有值\n      this.pickerObject.$container.find('.td.available').removeClass('current in-range');\n      this.pickerObject.$container.find('.c-datepicker-time-panel').hide();\n      this.pickerObject.$container.hide();\n      this.betweenHandle(); // 判断范围，最大值最小值\n\n      if (this.onlyTime) {\n        this.fixedInputValOnlyTime();\n      } else {\n        this.fixedInputVal();\n      }\n\n      this.pickerObject.$container.data('isShow', false);\n      this.config.hide.call(this.pickerObject, type);\n    },\n    fixedInputVal: function fixedInputVal() {\n      var _config = this.config;\n      var _this = this.pickerObject; // 最大值最小值\n\n      var hasMin = _this.minJson ? true : false;\n      var hasMax = _this.maxJson ? true : false;\n\n      var getMoment = function getMoment(_this, val) {\n        return moment(API.newDateFixed(_this, val));\n      };\n\n      var minMoment = hasMin ? getMoment(_this, _config.min) : false;\n      var maxMoment = hasMax ? getMoment(_this, _config.max) : false;\n\n      if (_config.isRange) {\n        var valBegin = _this.$inputBegin.val();\n\n        var valEnd = _this.$inputEnd.val();\n\n        if (!valBegin && !valEnd) {\n          return;\n        }\n\n        var momentBegin = valBegin ? getMoment(_this, valBegin) : false;\n        var momentEnd = valEnd ? getMoment(_this, valEnd) : false; // 开始>结束=>设置为没改变时的值\n\n        if (valBegin && valEnd && momentBegin.isAfter(momentEnd)) {\n          _this.$inputBegin.val(_this.params.initBeginVal);\n\n          _this.$inputEnd.val(_this.params.initEndVal);\n\n          return;\n        } // 开始>结束不在范围内\n\n\n        if (hasMin && valBegin && momentBegin.isBefore(minMoment)) {\n          _this.$inputBegin.val(_config.min);\n        }\n\n        if (hasMax && valEnd && momentEnd.isAfter(maxMoment)) {\n          _this.$inputEnd.val(_config.max);\n        }\n      } else {\n        var val = _this.$input.val();\n\n        if (!val) {\n          return;\n        }\n\n        var momentBegin = val ? getMoment(_this, val) : false; // 开始>结束不在范围内\n\n        if (hasMin && momentBegin.isBefore(minMoment)) {\n          _this.$input.val(_config.min);\n        }\n\n        if (hasMax && momentBegin.isAfter(maxMoment)) {\n          _this.$input.val(_config.max);\n        }\n      }\n    },\n    fixedInputValOnlyTime: function fixedInputValOnlyTime() {\n      var _config = this.config;\n      var _this = this.pickerObject; // 最大值最小值\n\n      if (_config.isRange) {\n        var valBegin = _this.$inputBegin.val();\n\n        var valEnd = _this.$inputEnd.val();\n\n        if (!valBegin && !valEnd) {\n          return;\n        }\n\n        var valBeginArr = valBegin.split(':');\n        var valEndArr = valEnd.split(':');\n        var valSecondBegin = API.countSecond(valBeginArr);\n        var valSecondEnd = API.countSecond(valEndArr);\n\n        if (valSecondBegin > valSecondEnd) {\n          _this.$inputBegin.val(_this.params.initBeginVal);\n\n          _this.$inputEnd.val(_this.params.initEndVal);\n\n          return;\n        } // var val1 = TIMEONLYAPI.checkMinMaxGetVal(_this, valBeginArr);\n        // var val2 = TIMEONLYAPI.checkMinMaxGetVal(_this, valEndArr);\n\n\n        var minSecond = _this.configMinMax.minSecond;\n        var maxSecond = _this.configMinMax.maxSecond;\n\n        if (valSecondBegin < minSecond) {\n          _this.$inputBegin.val(_this.configMinMax.minVal);\n        }\n\n        if (valSecondEnd > maxSecond) {\n          _this.$inputEnd.val(_this.configMinMax.maxVal);\n        }\n      } else {\n        var val = _this.$input.val();\n\n        if (!_this.configMinMax || !val) {\n          return;\n        }\n\n        var valArr = val.split(':'); // 检查最大最小对比当前值，获取值\n\n        val = TIMEONLYAPI.checkMinMaxGetVal(_this, valArr);\n\n        _this.$input.val(val);\n      }\n    },\n    betweenHandle: function betweenHandle() {\n      var _config = this.config; // 处理范围间距，检测开始结束间隔时间\n\n      if (!_config.isRange || !_config.between) {\n        return false;\n      }\n\n      var start = this.pickerObject.$inputBegin.val();\n      var end = this.pickerObject.$inputEnd.val();\n\n      if (!start || !end) {\n        return false;\n      }\n\n      var beginMoment = moment(API.newDateFixed(this.pickerObject, start));\n      var endMoment = moment(API.newDateFixed(this.pickerObject, end));\n      var beginFormat = API.getTimeFormat(beginMoment);\n      var endFormat = API.getTimeFormat(endMoment); // 同一个月内\n\n      if (_config.between === 'month') {\n        if (beginFormat.year !== endFormat.year || beginFormat.month !== endFormat.month) {\n          var val = beginMoment.set({\n            'year': endFormat.year,\n            'month': endFormat.month - 1,\n            'date': 1\n          }).format(_config.format);\n          this.pickerObject.$inputBegin.val(val);\n        }\n\n        return;\n      } // 同一年内\n\n\n      if (_config.between === 'year') {\n        if (beginFormat.year !== endFormat.year) {\n          var val = beginMoment.set({\n            'year': endFormat.year,\n            'month': 0,\n            'date': 1\n          }).format(_config.format);\n          this.pickerObject.$inputBegin.val(val);\n        }\n\n        return;\n      } // 规定天数内\n\n\n      if (Number.isInteger(Number(_config.between))) {\n        var endRangeMoment = endMoment.add(-Number(_config.between), 'day');\n\n        if (endRangeMoment.isAfter(beginMoment)) {\n          var val = endRangeMoment.format(_config.format);\n          this.pickerObject.$inputBegin.val(val);\n        }\n      }\n    }\n  }); // 设置日期选择框位置\n\n  function setContainerPos(_this) {\n    var offset = _this.$target.offset();\n\n    var height = _this.$target.outerHeight();\n\n    _this.pickerObject.$container.css({\n      top: offset.top + height,\n      left: offset.left\n    });\n  }\n\n  function fillTime(_this, $time) {\n    // 修复满足格式但不完全符合的time格式修正\n    var time = $time.val();\n    var timeResult = time && time.match(API.timeReg(_this));\n\n    if (!time || !timeResult) {\n      return;\n    } else {\n      if (timeResult) {\n        time = _this.config.format.split(' ')[1].replace(/HH/, timeResult[1]).replace(/mm/, API.fillTime(timeResult[3])).replace(/ss/, API.fillTime(timeResult[5])); // timeResult[1] + ':' + API.fillTime(timeResult[3]) + ':' + API.fillTime(timeResult[5]);\n\n        $time.val(time);\n\n        if (!_this.config.isRange) {\n          $time.trigger('keyup');\n        }\n      }\n    }\n  }\n\n  function fillDay(_this, $day) {\n    // 修复满足格式但不完全符合的day格式修正\n    var day = $day.val();\n    var reg = API.dayReg(_this);\n    var dayResult = day.match(reg);\n\n    if (!day || !dayResult) {\n      return;\n    } else {\n      if (dayResult) {\n        // 兼容201808变为2018-00-08的情况\n        dayResult = API.fixedFill(dayResult);\n        day = dayResult[1] + _this.splitStr + API.fillTime(dayResult[3]) + _this.splitStr + API.fillTime(dayResult[5]);\n        $day.val(day);\n\n        if (!_this.config.isRange) {\n          $day.trigger('keyup');\n        }\n      }\n    }\n  } // renderSidebar\n\n\n  function rederSidebar(_this) {\n    var html = '';\n    var options = _this.config.shortcutOptions;\n\n    for (var i = 0; i < options.length; i++) {\n      var time = options[i].time || '';\n      html += RENDERAPI.sideBarButton(options[i].day, time, options[i].name);\n    }\n\n    return RENDERAPI.sideBarTpl(html);\n  } // 设置选中值\n\n\n  function setValue(_this, date) {\n    _this.$container.find('.c-datepicker-date-table td.current').removeClass('current'); // var date = _moment2.format(_this.config.format);\n\n\n    var timeArr = date.split(' ');\n\n    _this.$input.val(date);\n\n    _this.$container.find('.c-datePicker__input-day').val(timeArr[0]);\n\n    if (timeArr.length > 1) {\n      _this.$container.find('.c-datePicker__input-time').val(timeArr[1]);\n    }\n  } // 单个：填充表单时当选的值为空时，自动填充的值\n\n\n  function getMomentWhenEmpty(_this) {\n    var _moment, type;\n\n    var momentMin = moment(_this.config.min, _this.config.format);\n    var momentMax = moment(_this.config.max, _this.config.format);\n\n    if (_this.config.min && moment().isBefore(momentMin)) {\n      _moment = momentMin.format(_this.config.format);\n      type = 'min';\n    } else if (_this.config.max && moment().isAfter(momentMax)) {\n      _moment = momentMax.format(_this.config.format);\n      type = 'max';\n    } else {\n      _moment = moment().format(_this.config.format);\n      type = 'active';\n    }\n\n    return {\n      value: _moment,\n      type: type\n    };\n  }\n  /*========END 渲染表格===========*/\n\n\n  $.fn.datePicker = function (options) {\n    return this.each(function () {\n      new DatePicker(options, $(this));\n    });\n  };\n\n  $.fn.datePicker.dates = {};\n  $.fn.datePicker.dates = {\n    'zh-CN': {\n      days: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"],\n      months: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"],\n      now: \"此刻\",\n      clear: '清空',\n      headerYearLink: '年',\n      units: ['年', '月'],\n      confirm: '确定',\n      cancel: '取消',\n      chooseDay: '选择日期',\n      chooseTime: '选择时间',\n      begin: '开始时间',\n      end: '结束时间',\n      prevYear: '前一年',\n      prevMonth: '上个月',\n      nextYear: '后一年',\n      nextMonth: '下个月',\n      zero: '0点'\n    }\n  };\n  /*==============END PICKER============*/\n})(jQuery); // var DATAPICKERAPI = {\n//   // 快捷选项option:当前月\n//   activeMonthRange: function () {\n//     return {\n//       begin: moment().set({ 'date': 1, 'hour': 0, 'minute': 0, 'second': 0 }).format('YYYY-MM-DD HH:mm:ss'),\n//       end: moment().set({ 'hour': 23, 'minute': 59, 'second': 59 }).format('YYYY-MM-DD HH:mm:ss')\n//     }\n//   },\n//   shortcutMonth: function () {\n//     // 当月\n//     var nowDay = moment().get('date');\n//     var prevMonthFirstDay = moment().subtract(1, 'months').set({ 'date': 1 });\n//     var prevMonthDay = moment().diff(prevMonthFirstDay, 'days');\n//     return {\n//       now: '-' + nowDay + ',0',\n//       prev: '-' + prevMonthDay + ',-' + nowDay\n//     }\n//   },\n//   // 快捷选项option:只能同一个月份内的\n//   rangeMonthShortcutOption1: function () {\n//     var result = DATAPICKERAPI.shortcutMonth();\n//     return [{\n//       name: '昨天',\n//       day: '-1,-1',\n//       time: '00:00:00,23:59:59'\n//     }, {\n//       name: '当月',\n//       day: result.now,\n//       time: '00:00:00,'\n//     }, {\n//       name: '上一月',\n//       day: result.prev,\n//       time: '00:00:00,23:59:59'\n//     }];\n//   },\n//   // 快捷选项option\n//   rangeShortcutOption1: [{\n//     name: '最近一周',\n//     day: '-7,0'\n//   }, {\n//     name: '最近一个月',\n//     day: '-30,0'\n//   }, {\n//     name: '最近三个月',\n//     day: '-90, 0'\n//   }],\n//   singleShortcutOptions1: [{\n//     name: '今天',\n//     day: '0'\n//   }, {\n//     name: '昨天',\n//     day: '-1',\n//     time: '00:00:00'\n//   }, {\n//     name: '一周前',\n//     day: '-7'\n//   }]\n// };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/datepicker/datepicker.all.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/datepicker/datepicker.all.js"]();
/******/ 	
/******/ })()
;