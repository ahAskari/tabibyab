/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/index.js":
/*!*******************************!*\
  !*** ./resources/js/index.js ***!
  \*******************************/
/***/ (() => {

eval("var x, i, j, l, ll, selElmnt, a, b, c;\n/*look for any elements with the class \"customSelectDoctor\":*/\n\nx = document.getElementsByClassName(\"customSelectDoctor\");\nl = x.length;\n\nfor (i = 0; i < l; i++) {\n  selElmnt = x[i].getElementsByTagName(\"select\")[0];\n  ll = selElmnt.length;\n  /*for each element, create a new DIV that will act as the selected item:*/\n\n  a = document.createElement(\"DIV\");\n  a.setAttribute(\"class\", \"select-selected\");\n  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\n  x[i].appendChild(a);\n  /*for each element, create a new DIV that will contain the option list:*/\n\n  b = document.createElement(\"DIV\");\n  b.setAttribute(\"class\", \"select-items select-hide\");\n\n  for (j = 1; j < ll; j++) {\n    /*for each option in the original select element,\n    create a new DIV that will act as an option item:*/\n    c = document.createElement(\"DIV\");\n    c.innerHTML = selElmnt.options[j].innerHTML;\n    c.addEventListener(\"click\", function (e) {\n      /*when an item is clicked, update the original select box,\n        and the selected item:*/\n      var y, i, k, s, h, sl, yl;\n      s = this.parentNode.parentNode.getElementsByTagName(\"select\")[0];\n      sl = s.length;\n      h = this.parentNode.previousSibling;\n\n      for (i = 0; i < sl; i++) {\n        if (s.options[i].innerHTML == this.innerHTML) {\n          s.selectedIndex = i;\n          h.innerHTML = this.innerHTML;\n          y = this.parentNode.getElementsByClassName(\"same-as-selected\");\n          yl = y.length;\n\n          for (k = 0; k < yl; k++) {\n            y[k].removeAttribute(\"class\");\n          }\n\n          this.setAttribute(\"class\", \"same-as-selected\");\n          break;\n        }\n      }\n\n      h.click();\n    });\n    b.appendChild(c);\n  }\n\n  x[i].appendChild(b);\n  a.addEventListener(\"click\", function (e) {\n    /*when the select box is clicked, close any other select boxes,\n      and open/close the current select box:*/\n    e.stopPropagation();\n    closeAllSelect(this);\n    this.nextSibling.classList.toggle(\"select-hide\");\n    this.classList.toggle(\"select-arrow-active\");\n  });\n}\n\nfunction closeAllSelect(elmnt) {\n  /*a function that will close all select boxes in the document,\n  except the current select box:*/\n  var x,\n      y,\n      i,\n      xl,\n      yl,\n      arrNo = [];\n  x = document.getElementsByClassName(\"select-items\");\n  y = document.getElementsByClassName(\"select-selected\");\n  xl = x.length;\n  yl = y.length;\n\n  for (i = 0; i < yl; i++) {\n    if (elmnt == y[i]) {\n      arrNo.push(i);\n    } else {\n      y[i].classList.remove(\"select-arrow-active\");\n    }\n  }\n\n  for (i = 0; i < xl; i++) {\n    if (arrNo.indexOf(i)) {\n      x[i].classList.add(\"select-hide\");\n    }\n  }\n}\n/*if the user clicks anywhere outside the select box,\nthen close all select boxes:*/\n\n\ndocument.addEventListener(\"click\", closeAllSelect);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/index.js"]();
/******/ 	
/******/ })()
;